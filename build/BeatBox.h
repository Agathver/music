/* BeatBox.h generated by valac 0.11.5, the Vala compiler, do not modify */


#ifndef __BEATBOX_H__
#define __BEATBOX_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <gdk-pixbuf/gdk-pixdata.h>
#include <float.h>
#include <math.h>
#include <gdk/gdk.h>
#include <libxml/tree.h>
#include <libxml/parser.h>

G_BEGIN_DECLS


#define BEAT_BOX_TYPE_BEATBOX (beat_box_beatbox_get_type ())
#define BEAT_BOX_BEATBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_BEATBOX, BeatBoxBeatbox))
#define BEAT_BOX_BEATBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_BEATBOX, BeatBoxBeatboxClass))
#define BEAT_BOX_IS_BEATBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_BEATBOX))
#define BEAT_BOX_IS_BEATBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_BEATBOX))
#define BEAT_BOX_BEATBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_BEATBOX, BeatBoxBeatboxClass))

typedef struct _BeatBoxBeatbox BeatBoxBeatbox;
typedef struct _BeatBoxBeatboxClass BeatBoxBeatboxClass;
typedef struct _BeatBoxBeatboxPrivate BeatBoxBeatboxPrivate;

#define BEAT_BOX_TYPE_DATA_BASE_MANAGER (beat_box_data_base_manager_get_type ())
#define BEAT_BOX_DATA_BASE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_DATA_BASE_MANAGER, BeatBoxDataBaseManager))
#define BEAT_BOX_DATA_BASE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_DATA_BASE_MANAGER, BeatBoxDataBaseManagerClass))
#define BEAT_BOX_IS_DATA_BASE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_DATA_BASE_MANAGER))
#define BEAT_BOX_IS_DATA_BASE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_DATA_BASE_MANAGER))
#define BEAT_BOX_DATA_BASE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_DATA_BASE_MANAGER, BeatBoxDataBaseManagerClass))

typedef struct _BeatBoxDataBaseManager BeatBoxDataBaseManager;
typedef struct _BeatBoxDataBaseManagerClass BeatBoxDataBaseManagerClass;
typedef struct _BeatBoxDataBaseManagerPrivate BeatBoxDataBaseManagerPrivate;

#define BEAT_BOX_TYPE_SONG (beat_box_song_get_type ())
#define BEAT_BOX_SONG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SONG, BeatBoxSong))
#define BEAT_BOX_SONG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SONG, BeatBoxSongClass))
#define BEAT_BOX_IS_SONG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SONG))
#define BEAT_BOX_IS_SONG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SONG))
#define BEAT_BOX_SONG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SONG, BeatBoxSongClass))

typedef struct _BeatBoxSong BeatBoxSong;
typedef struct _BeatBoxSongClass BeatBoxSongClass;

#define BEAT_BOX_TYPE_PLAYLIST (beat_box_playlist_get_type ())
#define BEAT_BOX_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_PLAYLIST, BeatBoxPlaylist))
#define BEAT_BOX_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_PLAYLIST, BeatBoxPlaylistClass))
#define BEAT_BOX_IS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_PLAYLIST))
#define BEAT_BOX_IS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_PLAYLIST))
#define BEAT_BOX_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_PLAYLIST, BeatBoxPlaylistClass))

typedef struct _BeatBoxPlaylist BeatBoxPlaylist;
typedef struct _BeatBoxPlaylistClass BeatBoxPlaylistClass;

#define BEAT_BOX_TYPE_SMART_PLAYLIST (beat_box_smart_playlist_get_type ())
#define BEAT_BOX_SMART_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST, BeatBoxSmartPlaylist))
#define BEAT_BOX_SMART_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SMART_PLAYLIST, BeatBoxSmartPlaylistClass))
#define BEAT_BOX_IS_SMART_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST))
#define BEAT_BOX_IS_SMART_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SMART_PLAYLIST))
#define BEAT_BOX_SMART_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST, BeatBoxSmartPlaylistClass))

typedef struct _BeatBoxSmartPlaylist BeatBoxSmartPlaylist;
typedef struct _BeatBoxSmartPlaylistClass BeatBoxSmartPlaylistClass;

#define LAST_FM_TYPE_ALBUM_INFO (last_fm_album_info_get_type ())
#define LAST_FM_ALBUM_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAST_FM_TYPE_ALBUM_INFO, LastFMAlbumInfo))
#define LAST_FM_ALBUM_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAST_FM_TYPE_ALBUM_INFO, LastFMAlbumInfoClass))
#define LAST_FM_IS_ALBUM_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAST_FM_TYPE_ALBUM_INFO))
#define LAST_FM_IS_ALBUM_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAST_FM_TYPE_ALBUM_INFO))
#define LAST_FM_ALBUM_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAST_FM_TYPE_ALBUM_INFO, LastFMAlbumInfoClass))

typedef struct _LastFMAlbumInfo LastFMAlbumInfo;
typedef struct _LastFMAlbumInfoClass LastFMAlbumInfoClass;

#define LAST_FM_TYPE_ARTIST_INFO (last_fm_artist_info_get_type ())
#define LAST_FM_ARTIST_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAST_FM_TYPE_ARTIST_INFO, LastFMArtistInfo))
#define LAST_FM_ARTIST_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAST_FM_TYPE_ARTIST_INFO, LastFMArtistInfoClass))
#define LAST_FM_IS_ARTIST_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAST_FM_TYPE_ARTIST_INFO))
#define LAST_FM_IS_ARTIST_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAST_FM_TYPE_ARTIST_INFO))
#define LAST_FM_ARTIST_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAST_FM_TYPE_ARTIST_INFO, LastFMArtistInfoClass))

typedef struct _LastFMArtistInfo LastFMArtistInfo;
typedef struct _LastFMArtistInfoClass LastFMArtistInfoClass;

#define LAST_FM_TYPE_TRACK_INFO (last_fm_track_info_get_type ())
#define LAST_FM_TRACK_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAST_FM_TYPE_TRACK_INFO, LastFMTrackInfo))
#define LAST_FM_TRACK_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAST_FM_TYPE_TRACK_INFO, LastFMTrackInfoClass))
#define LAST_FM_IS_TRACK_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAST_FM_TYPE_TRACK_INFO))
#define LAST_FM_IS_TRACK_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAST_FM_TYPE_TRACK_INFO))
#define LAST_FM_TRACK_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAST_FM_TYPE_TRACK_INFO, LastFMTrackInfoClass))

typedef struct _LastFMTrackInfo LastFMTrackInfo;
typedef struct _LastFMTrackInfoClass LastFMTrackInfoClass;

#define BEAT_BOX_TYPE_FILE_OPERATOR (beat_box_file_operator_get_type ())
#define BEAT_BOX_FILE_OPERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_FILE_OPERATOR, BeatBoxFileOperator))
#define BEAT_BOX_FILE_OPERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_FILE_OPERATOR, BeatBoxFileOperatorClass))
#define BEAT_BOX_IS_FILE_OPERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_FILE_OPERATOR))
#define BEAT_BOX_IS_FILE_OPERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_FILE_OPERATOR))
#define BEAT_BOX_FILE_OPERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_FILE_OPERATOR, BeatBoxFileOperatorClass))

typedef struct _BeatBoxFileOperator BeatBoxFileOperator;
typedef struct _BeatBoxFileOperatorClass BeatBoxFileOperatorClass;
typedef struct _BeatBoxFileOperatorPrivate BeatBoxFileOperatorPrivate;

#define BEAT_BOX_TYPE_LIBRARY_MANAGER (beat_box_library_manager_get_type ())
#define BEAT_BOX_LIBRARY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_LIBRARY_MANAGER, BeatBoxLibraryManager))
#define BEAT_BOX_LIBRARY_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_LIBRARY_MANAGER, BeatBoxLibraryManagerClass))
#define BEAT_BOX_IS_LIBRARY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_LIBRARY_MANAGER))
#define BEAT_BOX_IS_LIBRARY_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_LIBRARY_MANAGER))
#define BEAT_BOX_LIBRARY_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_LIBRARY_MANAGER, BeatBoxLibraryManagerClass))

typedef struct _BeatBoxLibraryManager BeatBoxLibraryManager;
typedef struct _BeatBoxLibraryManagerClass BeatBoxLibraryManagerClass;

#define BEAT_BOX_TYPE_SETTINGS (beat_box_settings_get_type ())
#define BEAT_BOX_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SETTINGS, BeatBoxSettings))
#define BEAT_BOX_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SETTINGS, BeatBoxSettingsClass))
#define BEAT_BOX_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SETTINGS))
#define BEAT_BOX_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SETTINGS))
#define BEAT_BOX_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SETTINGS, BeatBoxSettingsClass))

typedef struct _BeatBoxSettings BeatBoxSettings;
typedef struct _BeatBoxSettingsClass BeatBoxSettingsClass;

#define BEAT_BOX_TYPE_LIBRARY_WINDOW (beat_box_library_window_get_type ())
#define BEAT_BOX_LIBRARY_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_LIBRARY_WINDOW, BeatBoxLibraryWindow))
#define BEAT_BOX_LIBRARY_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_LIBRARY_WINDOW, BeatBoxLibraryWindowClass))
#define BEAT_BOX_IS_LIBRARY_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_LIBRARY_WINDOW))
#define BEAT_BOX_IS_LIBRARY_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_LIBRARY_WINDOW))
#define BEAT_BOX_LIBRARY_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_LIBRARY_WINDOW, BeatBoxLibraryWindowClass))

typedef struct _BeatBoxLibraryWindow BeatBoxLibraryWindow;
typedef struct _BeatBoxLibraryWindowClass BeatBoxLibraryWindowClass;
typedef struct _BeatBoxLibraryWindowPrivate BeatBoxLibraryWindowPrivate;

#define BEAT_BOX_TYPE_STREAM_PLAYER (beat_box_stream_player_get_type ())
#define BEAT_BOX_STREAM_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_STREAM_PLAYER, BeatBoxStreamPlayer))
#define BEAT_BOX_STREAM_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_STREAM_PLAYER, BeatBoxStreamPlayerClass))
#define BEAT_BOX_IS_STREAM_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_STREAM_PLAYER))
#define BEAT_BOX_IS_STREAM_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_STREAM_PLAYER))
#define BEAT_BOX_STREAM_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_STREAM_PLAYER, BeatBoxStreamPlayerClass))

typedef struct _BeatBoxStreamPlayer BeatBoxStreamPlayer;
typedef struct _BeatBoxStreamPlayerClass BeatBoxStreamPlayerClass;
typedef struct _BeatBoxLibraryManagerPrivate BeatBoxLibraryManagerPrivate;

#define LAST_FM_TYPE_CORE (last_fm_core_get_type ())
#define LAST_FM_CORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAST_FM_TYPE_CORE, LastFMCore))
#define LAST_FM_CORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAST_FM_TYPE_CORE, LastFMCoreClass))
#define LAST_FM_IS_CORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAST_FM_TYPE_CORE))
#define LAST_FM_IS_CORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAST_FM_TYPE_CORE))
#define LAST_FM_CORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAST_FM_TYPE_CORE, LastFMCoreClass))

typedef struct _LastFMCore LastFMCore;
typedef struct _LastFMCoreClass LastFMCoreClass;

#define BEAT_BOX_TYPE_SONG_INFO (beat_box_song_info_get_type ())
#define BEAT_BOX_SONG_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SONG_INFO, BeatBoxSongInfo))
#define BEAT_BOX_SONG_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SONG_INFO, BeatBoxSongInfoClass))
#define BEAT_BOX_IS_SONG_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SONG_INFO))
#define BEAT_BOX_IS_SONG_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SONG_INFO))
#define BEAT_BOX_SONG_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SONG_INFO, BeatBoxSongInfoClass))

typedef struct _BeatBoxSongInfo BeatBoxSongInfo;
typedef struct _BeatBoxSongInfoClass BeatBoxSongInfoClass;
typedef struct _BeatBoxSettingsPrivate BeatBoxSettingsPrivate;
typedef struct _BeatBoxStreamPlayerPrivate BeatBoxStreamPlayerPrivate;

#define BEAT_BOX_TYPE_NOT_IMPORTED_WINDOW (beat_box_not_imported_window_get_type ())
#define BEAT_BOX_NOT_IMPORTED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_NOT_IMPORTED_WINDOW, BeatBoxNotImportedWindow))
#define BEAT_BOX_NOT_IMPORTED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_NOT_IMPORTED_WINDOW, BeatBoxNotImportedWindowClass))
#define BEAT_BOX_IS_NOT_IMPORTED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_NOT_IMPORTED_WINDOW))
#define BEAT_BOX_IS_NOT_IMPORTED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_NOT_IMPORTED_WINDOW))
#define BEAT_BOX_NOT_IMPORTED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_NOT_IMPORTED_WINDOW, BeatBoxNotImportedWindowClass))

typedef struct _BeatBoxNotImportedWindow BeatBoxNotImportedWindow;
typedef struct _BeatBoxNotImportedWindowClass BeatBoxNotImportedWindowClass;
typedef struct _BeatBoxNotImportedWindowPrivate BeatBoxNotImportedWindowPrivate;

#define BEAT_BOX_TYPE_PLAYLIST_NAME_WINDOW (beat_box_playlist_name_window_get_type ())
#define BEAT_BOX_PLAYLIST_NAME_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_PLAYLIST_NAME_WINDOW, BeatBoxPlaylistNameWindow))
#define BEAT_BOX_PLAYLIST_NAME_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_PLAYLIST_NAME_WINDOW, BeatBoxPlaylistNameWindowClass))
#define BEAT_BOX_IS_PLAYLIST_NAME_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_PLAYLIST_NAME_WINDOW))
#define BEAT_BOX_IS_PLAYLIST_NAME_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_PLAYLIST_NAME_WINDOW))
#define BEAT_BOX_PLAYLIST_NAME_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_PLAYLIST_NAME_WINDOW, BeatBoxPlaylistNameWindowClass))

typedef struct _BeatBoxPlaylistNameWindow BeatBoxPlaylistNameWindow;
typedef struct _BeatBoxPlaylistNameWindowClass BeatBoxPlaylistNameWindowClass;
typedef struct _BeatBoxPlaylistNameWindowPrivate BeatBoxPlaylistNameWindowPrivate;

#define BEAT_BOX_TYPE_PREFERENCES_WINDOW (beat_box_preferences_window_get_type ())
#define BEAT_BOX_PREFERENCES_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_PREFERENCES_WINDOW, BeatBoxPreferencesWindow))
#define BEAT_BOX_PREFERENCES_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_PREFERENCES_WINDOW, BeatBoxPreferencesWindowClass))
#define BEAT_BOX_IS_PREFERENCES_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_PREFERENCES_WINDOW))
#define BEAT_BOX_IS_PREFERENCES_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_PREFERENCES_WINDOW))
#define BEAT_BOX_PREFERENCES_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_PREFERENCES_WINDOW, BeatBoxPreferencesWindowClass))

typedef struct _BeatBoxPreferencesWindow BeatBoxPreferencesWindow;
typedef struct _BeatBoxPreferencesWindowClass BeatBoxPreferencesWindowClass;
typedef struct _BeatBoxPreferencesWindowPrivate BeatBoxPreferencesWindowPrivate;

#define BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR (beat_box_smart_playlist_editor_get_type ())
#define BEAT_BOX_SMART_PLAYLIST_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR, BeatBoxSmartPlaylistEditor))
#define BEAT_BOX_SMART_PLAYLIST_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR, BeatBoxSmartPlaylistEditorClass))
#define BEAT_BOX_IS_SMART_PLAYLIST_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR))
#define BEAT_BOX_IS_SMART_PLAYLIST_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR))
#define BEAT_BOX_SMART_PLAYLIST_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR, BeatBoxSmartPlaylistEditorClass))

typedef struct _BeatBoxSmartPlaylistEditor BeatBoxSmartPlaylistEditor;
typedef struct _BeatBoxSmartPlaylistEditorClass BeatBoxSmartPlaylistEditorClass;
typedef struct _BeatBoxSmartPlaylistEditorPrivate BeatBoxSmartPlaylistEditorPrivate;

#define BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR_QUERY (beat_box_smart_playlist_editor_query_get_type ())
#define BEAT_BOX_SMART_PLAYLIST_EDITOR_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR_QUERY, BeatBoxSmartPlaylistEditorQuery))
#define BEAT_BOX_SMART_PLAYLIST_EDITOR_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR_QUERY, BeatBoxSmartPlaylistEditorQueryClass))
#define BEAT_BOX_IS_SMART_PLAYLIST_EDITOR_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR_QUERY))
#define BEAT_BOX_IS_SMART_PLAYLIST_EDITOR_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR_QUERY))
#define BEAT_BOX_SMART_PLAYLIST_EDITOR_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SMART_PLAYLIST_EDITOR_QUERY, BeatBoxSmartPlaylistEditorQueryClass))

typedef struct _BeatBoxSmartPlaylistEditorQuery BeatBoxSmartPlaylistEditorQuery;
typedef struct _BeatBoxSmartPlaylistEditorQueryClass BeatBoxSmartPlaylistEditorQueryClass;
typedef struct _BeatBoxSmartPlaylistEditorQueryPrivate BeatBoxSmartPlaylistEditorQueryPrivate;

#define BEAT_BOX_TYPE_SMART_QUERY (beat_box_smart_query_get_type ())
#define BEAT_BOX_SMART_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SMART_QUERY, BeatBoxSmartQuery))
#define BEAT_BOX_SMART_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SMART_QUERY, BeatBoxSmartQueryClass))
#define BEAT_BOX_IS_SMART_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SMART_QUERY))
#define BEAT_BOX_IS_SMART_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SMART_QUERY))
#define BEAT_BOX_SMART_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SMART_QUERY, BeatBoxSmartQueryClass))

typedef struct _BeatBoxSmartQuery BeatBoxSmartQuery;
typedef struct _BeatBoxSmartQueryClass BeatBoxSmartQueryClass;

#define BEAT_BOX_TYPE_SONG_EDITOR (beat_box_song_editor_get_type ())
#define BEAT_BOX_SONG_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SONG_EDITOR, BeatBoxSongEditor))
#define BEAT_BOX_SONG_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SONG_EDITOR, BeatBoxSongEditorClass))
#define BEAT_BOX_IS_SONG_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SONG_EDITOR))
#define BEAT_BOX_IS_SONG_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SONG_EDITOR))
#define BEAT_BOX_SONG_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SONG_EDITOR, BeatBoxSongEditorClass))

typedef struct _BeatBoxSongEditor BeatBoxSongEditor;
typedef struct _BeatBoxSongEditorClass BeatBoxSongEditorClass;
typedef struct _BeatBoxSongEditorPrivate BeatBoxSongEditorPrivate;

#define BEAT_BOX_TYPE_FIELD_EDITOR (beat_box_field_editor_get_type ())
#define BEAT_BOX_FIELD_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_FIELD_EDITOR, BeatBoxFieldEditor))
#define BEAT_BOX_FIELD_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_FIELD_EDITOR, BeatBoxFieldEditorClass))
#define BEAT_BOX_IS_FIELD_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_FIELD_EDITOR))
#define BEAT_BOX_IS_FIELD_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_FIELD_EDITOR))
#define BEAT_BOX_FIELD_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_FIELD_EDITOR, BeatBoxFieldEditorClass))

typedef struct _BeatBoxFieldEditor BeatBoxFieldEditor;
typedef struct _BeatBoxFieldEditorClass BeatBoxFieldEditorClass;
typedef struct _BeatBoxFieldEditorPrivate BeatBoxFieldEditorPrivate;
typedef struct _LastFMCorePrivate LastFMCorePrivate;
typedef struct _LastFMAlbumInfoPrivate LastFMAlbumInfoPrivate;

#define LAST_FM_TYPE_TAG (last_fm_tag_get_type ())
#define LAST_FM_TAG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAST_FM_TYPE_TAG, LastFMTag))
#define LAST_FM_TAG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAST_FM_TYPE_TAG, LastFMTagClass))
#define LAST_FM_IS_TAG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAST_FM_TYPE_TAG))
#define LAST_FM_IS_TAG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAST_FM_TYPE_TAG))
#define LAST_FM_TAG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAST_FM_TYPE_TAG, LastFMTagClass))

typedef struct _LastFMTag LastFMTag;
typedef struct _LastFMTagClass LastFMTagClass;

#define LAST_FM_TYPE_IMAGE (last_fm_image_get_type ())
#define LAST_FM_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAST_FM_TYPE_IMAGE, LastFMImage))
#define LAST_FM_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAST_FM_TYPE_IMAGE, LastFMImageClass))
#define LAST_FM_IS_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAST_FM_TYPE_IMAGE))
#define LAST_FM_IS_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAST_FM_TYPE_IMAGE))
#define LAST_FM_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAST_FM_TYPE_IMAGE, LastFMImageClass))

typedef struct _LastFMImage LastFMImage;
typedef struct _LastFMImageClass LastFMImageClass;
typedef struct _LastFMArtistInfoPrivate LastFMArtistInfoPrivate;
typedef struct _LastFMImagePrivate LastFMImagePrivate;
typedef struct _LastFMTagPrivate LastFMTagPrivate;
typedef struct _LastFMTrackInfoPrivate LastFMTrackInfoPrivate;
typedef struct _BeatBoxPlaylistPrivate BeatBoxPlaylistPrivate;
typedef struct _BeatBoxSmartPlaylistPrivate BeatBoxSmartPlaylistPrivate;
typedef struct _BeatBoxSmartQueryPrivate BeatBoxSmartQueryPrivate;
typedef struct _BeatBoxSongPrivate BeatBoxSongPrivate;

#define TYPE_TOOL_BUTTON_WITH_MENU (tool_button_with_menu_get_type ())
#define TOOL_BUTTON_WITH_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TOOL_BUTTON_WITH_MENU, ToolButtonWithMenu))
#define TOOL_BUTTON_WITH_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TOOL_BUTTON_WITH_MENU, ToolButtonWithMenuClass))
#define IS_TOOL_BUTTON_WITH_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TOOL_BUTTON_WITH_MENU))
#define IS_TOOL_BUTTON_WITH_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TOOL_BUTTON_WITH_MENU))
#define TOOL_BUTTON_WITH_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TOOL_BUTTON_WITH_MENU, ToolButtonWithMenuClass))

typedef struct _ToolButtonWithMenu ToolButtonWithMenu;
typedef struct _ToolButtonWithMenuClass ToolButtonWithMenuClass;
typedef struct _ToolButtonWithMenuPrivate ToolButtonWithMenuPrivate;

#define ELEMENTARY_WIDGETS_TYPE_APP_MENU (elementary_widgets_app_menu_get_type ())
#define ELEMENTARY_WIDGETS_APP_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ELEMENTARY_WIDGETS_TYPE_APP_MENU, ElementaryWidgetsAppMenu))
#define ELEMENTARY_WIDGETS_APP_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ELEMENTARY_WIDGETS_TYPE_APP_MENU, ElementaryWidgetsAppMenuClass))
#define ELEMENTARY_WIDGETS_IS_APP_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ELEMENTARY_WIDGETS_TYPE_APP_MENU))
#define ELEMENTARY_WIDGETS_IS_APP_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ELEMENTARY_WIDGETS_TYPE_APP_MENU))
#define ELEMENTARY_WIDGETS_APP_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ELEMENTARY_WIDGETS_TYPE_APP_MENU, ElementaryWidgetsAppMenuClass))

typedef struct _ElementaryWidgetsAppMenu ElementaryWidgetsAppMenu;
typedef struct _ElementaryWidgetsAppMenuClass ElementaryWidgetsAppMenuClass;
typedef struct _ElementaryWidgetsAppMenuPrivate ElementaryWidgetsAppMenuPrivate;

#define ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_ENTRY (elementary_widgets_elementary_entry_get_type ())
#define ELEMENTARY_WIDGETS_ELEMENTARY_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_ENTRY, ElementaryWidgetsElementaryEntry))
#define ELEMENTARY_WIDGETS_ELEMENTARY_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_ENTRY, ElementaryWidgetsElementaryEntryClass))
#define ELEMENTARY_WIDGETS_IS_ELEMENTARY_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_ENTRY))
#define ELEMENTARY_WIDGETS_IS_ELEMENTARY_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_ENTRY))
#define ELEMENTARY_WIDGETS_ELEMENTARY_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_ENTRY, ElementaryWidgetsElementaryEntryClass))

typedef struct _ElementaryWidgetsElementaryEntry ElementaryWidgetsElementaryEntry;
typedef struct _ElementaryWidgetsElementaryEntryClass ElementaryWidgetsElementaryEntryClass;
typedef struct _ElementaryWidgetsElementaryEntryPrivate ElementaryWidgetsElementaryEntryPrivate;

#define ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_SEARCH_ENTRY (elementary_widgets_elementary_search_entry_get_type ())
#define ELEMENTARY_WIDGETS_ELEMENTARY_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_SEARCH_ENTRY, ElementaryWidgetsElementarySearchEntry))
#define ELEMENTARY_WIDGETS_ELEMENTARY_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_SEARCH_ENTRY, ElementaryWidgetsElementarySearchEntryClass))
#define ELEMENTARY_WIDGETS_IS_ELEMENTARY_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_SEARCH_ENTRY))
#define ELEMENTARY_WIDGETS_IS_ELEMENTARY_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_SEARCH_ENTRY))
#define ELEMENTARY_WIDGETS_ELEMENTARY_SEARCH_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ELEMENTARY_WIDGETS_TYPE_ELEMENTARY_SEARCH_ENTRY, ElementaryWidgetsElementarySearchEntryClass))

typedef struct _ElementaryWidgetsElementarySearchEntry ElementaryWidgetsElementarySearchEntry;
typedef struct _ElementaryWidgetsElementarySearchEntryClass ElementaryWidgetsElementarySearchEntryClass;
typedef struct _ElementaryWidgetsElementarySearchEntryPrivate ElementaryWidgetsElementarySearchEntryPrivate;

#define TYPE_ELEMENTARY_TREE_VIEW (elementary_tree_view_get_type ())
#define ELEMENTARY_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ELEMENTARY_TREE_VIEW, ElementaryTreeView))
#define ELEMENTARY_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ELEMENTARY_TREE_VIEW, ElementaryTreeViewClass))
#define IS_ELEMENTARY_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ELEMENTARY_TREE_VIEW))
#define IS_ELEMENTARY_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ELEMENTARY_TREE_VIEW))
#define ELEMENTARY_TREE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ELEMENTARY_TREE_VIEW, ElementaryTreeViewClass))

typedef struct _ElementaryTreeView ElementaryTreeView;
typedef struct _ElementaryTreeViewClass ElementaryTreeViewClass;
typedef struct _ElementaryTreeViewPrivate ElementaryTreeViewPrivate;

#define BEAT_BOX_TYPE_MUSIC_TREE_VIEW (beat_box_music_tree_view_get_type ())
#define BEAT_BOX_MUSIC_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_MUSIC_TREE_VIEW, BeatBoxMusicTreeView))
#define BEAT_BOX_MUSIC_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_MUSIC_TREE_VIEW, BeatBoxMusicTreeViewClass))
#define BEAT_BOX_IS_MUSIC_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_MUSIC_TREE_VIEW))
#define BEAT_BOX_IS_MUSIC_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_MUSIC_TREE_VIEW))
#define BEAT_BOX_MUSIC_TREE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_MUSIC_TREE_VIEW, BeatBoxMusicTreeViewClass))

typedef struct _BeatBoxMusicTreeView BeatBoxMusicTreeView;
typedef struct _BeatBoxMusicTreeViewClass BeatBoxMusicTreeViewClass;
typedef struct _BeatBoxMusicTreeViewPrivate BeatBoxMusicTreeViewPrivate;

#define BEAT_BOX_TYPE_SIDE_TREE_VIEW (beat_box_side_tree_view_get_type ())
#define BEAT_BOX_SIDE_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BEAT_BOX_TYPE_SIDE_TREE_VIEW, BeatBoxSideTreeView))
#define BEAT_BOX_SIDE_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BEAT_BOX_TYPE_SIDE_TREE_VIEW, BeatBoxSideTreeViewClass))
#define BEAT_BOX_IS_SIDE_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BEAT_BOX_TYPE_SIDE_TREE_VIEW))
#define BEAT_BOX_IS_SIDE_TREE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BEAT_BOX_TYPE_SIDE_TREE_VIEW))
#define BEAT_BOX_SIDE_TREE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BEAT_BOX_TYPE_SIDE_TREE_VIEW, BeatBoxSideTreeViewClass))

typedef struct _BeatBoxSideTreeView BeatBoxSideTreeView;
typedef struct _BeatBoxSideTreeViewClass BeatBoxSideTreeViewClass;
typedef struct _BeatBoxSideTreeViewPrivate BeatBoxSideTreeViewPrivate;
typedef struct _BeatBoxSongInfoPrivate BeatBoxSongInfoPrivate;

#define ELEMENTARY_WIDGETS_TYPE_TOP_DISPLAY (elementary_widgets_top_display_get_type ())
#define ELEMENTARY_WIDGETS_TOP_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ELEMENTARY_WIDGETS_TYPE_TOP_DISPLAY, ElementaryWidgetsTopDisplay))
#define ELEMENTARY_WIDGETS_TOP_DISPLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ELEMENTARY_WIDGETS_TYPE_TOP_DISPLAY, ElementaryWidgetsTopDisplayClass))
#define ELEMENTARY_WIDGETS_IS_TOP_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ELEMENTARY_WIDGETS_TYPE_TOP_DISPLAY))
#define ELEMENTARY_WIDGETS_IS_TOP_DISPLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ELEMENTARY_WIDGETS_TYPE_TOP_DISPLAY))
#define ELEMENTARY_WIDGETS_TOP_DISPLAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ELEMENTARY_WIDGETS_TYPE_TOP_DISPLAY, ElementaryWidgetsTopDisplayClass))

typedef struct _ElementaryWidgetsTopDisplay ElementaryWidgetsTopDisplay;
typedef struct _ElementaryWidgetsTopDisplayClass ElementaryWidgetsTopDisplayClass;
typedef struct _ElementaryWidgetsTopDisplayPrivate ElementaryWidgetsTopDisplayPrivate;

struct _BeatBoxBeatbox {
	GObject parent_instance;
	BeatBoxBeatboxPrivate * priv;
};

struct _BeatBoxBeatboxClass {
	GObjectClass parent_class;
};

struct _BeatBoxDataBaseManager {
	GObject parent_instance;
	BeatBoxDataBaseManagerPrivate * priv;
};

struct _BeatBoxDataBaseManagerClass {
	GObjectClass parent_class;
};

struct _BeatBoxFileOperator {
	GObject parent_instance;
	BeatBoxFileOperatorPrivate * priv;
};

struct _BeatBoxFileOperatorClass {
	GObjectClass parent_class;
};

struct _BeatBoxLibraryWindow {
	GtkWindow parent_instance;
	BeatBoxLibraryWindowPrivate * priv;
};

struct _BeatBoxLibraryWindowClass {
	GtkWindowClass parent_class;
	void (*progressNotification) (BeatBoxLibraryWindow* self, const gchar* message, gdouble progress);
	void (*sideListDoubleClick) (BeatBoxLibraryWindow* self, GtkTreePath* path, GtkTreeViewColumn* column);
	void (*song_played) (BeatBoxLibraryWindow* self, gint i);
	void (*previousClicked) (BeatBoxLibraryWindow* self);
	void (*playClicked) (BeatBoxLibraryWindow* self);
	void (*nextClicked) (BeatBoxLibraryWindow* self);
	void (*shuffleClicked) (BeatBoxLibraryWindow* self);
	void (*loveButtonClicked) (BeatBoxLibraryWindow* self);
	void (*banButtonClicked) (BeatBoxLibraryWindow* self);
	void (*searchFieldChanged) (BeatBoxLibraryWindow* self);
	void (*musicTreeViewSearched) (BeatBoxLibraryWindow* self, const gchar* search);
	void (*sourcesToSongsHandleSet) (BeatBoxLibraryWindow* self, GdkRectangle* rectangle);
	void (*on_resize) (BeatBoxLibraryWindow* self);
	void (*on_quit) (BeatBoxLibraryWindow* self);
	void (*fileSetMusicFolderClick) (BeatBoxLibraryWindow* self);
	void (*fileRescanMusicFolderClick) (BeatBoxLibraryWindow* self);
	void (*musicAdded) (BeatBoxLibraryWindow* self, GeeLinkedList* not_imported);
	void (*musicRescanned) (BeatBoxLibraryWindow* self, GeeLinkedList* not_imported);
	void (*songRemovedFromManager) (BeatBoxLibraryWindow* self, gint id);
	void (*helpAboutClick) (BeatBoxLibraryWindow* self);
	void (*editPreferencesClick) (BeatBoxLibraryWindow* self);
	void (*end_of_stream) (BeatBoxLibraryWindow* self, BeatBoxSong* s);
	void (*current_position_update) (BeatBoxLibraryWindow* self, gint64 position);
	void (*topDisplaySliderMoved) (BeatBoxLibraryWindow* self, GtkScrollType scroll, gdouble val);
};

struct _BeatBoxLibraryManager {
	GObject parent_instance;
	BeatBoxLibraryManagerPrivate * priv;
	BeatBoxSettings* settings;
	BeatBoxDataBaseManager* dbm;
	BeatBoxFileOperator* fo;
	BeatBoxStreamPlayer* player;
	LastFMCore* lfm;
	gint _played_index;
	gint _current_index;
	gint _current_shuffled_index;
	BeatBoxSongInfo* song_info;
	gboolean playing;
	gboolean repeat;
	gboolean shuffle;
};

struct _BeatBoxLibraryManagerClass {
	GObjectClass parent_class;
	void (*dbProgress) (BeatBoxLibraryManager* self, const gchar* message, gdouble progress);
};

struct _BeatBoxSettings {
	GObject parent_instance;
	BeatBoxSettingsPrivate * priv;
};

struct _BeatBoxSettingsClass {
	GObjectClass parent_class;
};

struct _BeatBoxStreamPlayer {
	GObject parent_instance;
	BeatBoxStreamPlayerPrivate * priv;
};

struct _BeatBoxStreamPlayerClass {
	GObjectClass parent_class;
};

struct _BeatBoxNotImportedWindow {
	GtkWindow parent_instance;
	BeatBoxNotImportedWindowPrivate * priv;
};

struct _BeatBoxNotImportedWindowClass {
	GtkWindowClass parent_class;
	void (*moveToRecycleToggle) (BeatBoxNotImportedWindow* self);
	void (*deleteAllClick) (BeatBoxNotImportedWindow* self);
	void (*deleteSelectedClick) (BeatBoxNotImportedWindow* self);
	void (*ignoreClick) (BeatBoxNotImportedWindow* self);
};

struct _BeatBoxPlaylistNameWindow {
	GtkWindow parent_instance;
	BeatBoxPlaylistNameWindowPrivate * priv;
	BeatBoxPlaylist* _original;
	GtkEntry* _name;
	GtkButton* _save;
	GtkButton* _cancel;
};

struct _BeatBoxPlaylistNameWindowClass {
	GtkWindowClass parent_class;
	void (*saveClicked) (BeatBoxPlaylistNameWindow* self);
};

struct _BeatBoxPreferencesWindow {
	GtkWindow parent_instance;
	BeatBoxPreferencesWindowPrivate * priv;
};

struct _BeatBoxPreferencesWindowClass {
	GtkWindowClass parent_class;
	void (*lastfmLoginClick) (BeatBoxPreferencesWindow* self);
	void (*musicLocationsAddClicked) (BeatBoxPreferencesWindow* self);
	void (*musicLocationsRemoveClicked) (BeatBoxPreferencesWindow* self);
	void (*saveClicked) (BeatBoxPreferencesWindow* self);
	void (*cancelClicked) (BeatBoxPreferencesWindow* self);
};

struct _BeatBoxSmartPlaylistEditor {
	GtkWindow parent_instance;
	BeatBoxSmartPlaylistEditorPrivate * priv;
};

struct _BeatBoxSmartPlaylistEditorClass {
	GtkWindowClass parent_class;
	void (*addButtonClick) (BeatBoxSmartPlaylistEditor* self);
	void (*saveClick) (BeatBoxSmartPlaylistEditor* self);
	void (*cancelClick) (BeatBoxSmartPlaylistEditor* self);
};

struct _BeatBoxSmartPlaylistEditorQuery {
	GObject parent_instance;
	BeatBoxSmartPlaylistEditorQueryPrivate * priv;
	GtkHBox* _box;
	GeeHashMap* fields;
	GeeHashMap* comparators;
};

struct _BeatBoxSmartPlaylistEditorQueryClass {
	GObjectClass parent_class;
	void (*removeClicked) (BeatBoxSmartPlaylistEditorQuery* self);
};

struct _BeatBoxSongEditor {
	GtkWindow parent_instance;
	BeatBoxSongEditorPrivate * priv;
};

struct _BeatBoxSongEditorClass {
	GtkWindowClass parent_class;
	void (*saveClicked) (BeatBoxSongEditor* self);
};

struct _BeatBoxFieldEditor {
	GtkHBox parent_instance;
	BeatBoxFieldEditorPrivate * priv;
};

struct _BeatBoxFieldEditorClass {
	GtkHBoxClass parent_class;
	void (*entryChanged) (BeatBoxFieldEditor* self);
	void (*textViewChanged) (BeatBoxFieldEditor* self);
	void (*spinButtonChanged) (BeatBoxFieldEditor* self);
	void (*resetClicked) (BeatBoxFieldEditor* self);
};

struct _LastFMCore {
	GObject parent_instance;
	LastFMCorePrivate * priv;
	gchar* token;
	gchar* session_key;
};

struct _LastFMCoreClass {
	GObjectClass parent_class;
};

struct _LastFMAlbumInfo {
	GObject parent_instance;
	LastFMAlbumInfoPrivate * priv;
};

struct _LastFMAlbumInfoClass {
	GObjectClass parent_class;
};

struct _LastFMArtistInfo {
	GObject parent_instance;
	LastFMArtistInfoPrivate * priv;
};

struct _LastFMArtistInfoClass {
	GObjectClass parent_class;
};

struct _LastFMImage {
	GObject parent_instance;
	LastFMImagePrivate * priv;
};

struct _LastFMImageClass {
	GObjectClass parent_class;
};

struct _LastFMTag {
	GObject parent_instance;
	LastFMTagPrivate * priv;
};

struct _LastFMTagClass {
	GObjectClass parent_class;
};

struct _LastFMTrackInfo {
	GObject parent_instance;
	LastFMTrackInfoPrivate * priv;
};

struct _LastFMTrackInfoClass {
	GObjectClass parent_class;
};

struct _BeatBoxPlaylist {
	GObject parent_instance;
	BeatBoxPlaylistPrivate * priv;
};

struct _BeatBoxPlaylistClass {
	GObjectClass parent_class;
};

struct _BeatBoxSmartPlaylist {
	GObject parent_instance;
	BeatBoxSmartPlaylistPrivate * priv;
	gint query_count;
};

struct _BeatBoxSmartPlaylistClass {
	GObjectClass parent_class;
};

struct _BeatBoxSmartQuery {
	GObject parent_instance;
	BeatBoxSmartQueryPrivate * priv;
};

struct _BeatBoxSmartQueryClass {
	GObjectClass parent_class;
};

struct _BeatBoxSong {
	GObject parent_instance;
	BeatBoxSongPrivate * priv;
};

struct _BeatBoxSongClass {
	GObjectClass parent_class;
};

struct _ToolButtonWithMenu {
	GtkToggleToolButton parent_instance;
	ToolButtonWithMenuPrivate * priv;
	GtkMenu* menu;
};

struct _ToolButtonWithMenuClass {
	GtkToggleToolButtonClass parent_class;
};

struct _ElementaryWidgetsAppMenu {
	ToolButtonWithMenu parent_instance;
	ElementaryWidgetsAppMenuPrivate * priv;
};

struct _ElementaryWidgetsAppMenuClass {
	ToolButtonWithMenuClass parent_class;
};

struct _ElementaryWidgetsElementaryEntry {
	GtkEntry parent_instance;
	ElementaryWidgetsElementaryEntryPrivate * priv;
	gchar* hint_string;
};

struct _ElementaryWidgetsElementaryEntryClass {
	GtkEntryClass parent_class;
};

struct _ElementaryWidgetsElementarySearchEntry {
	ElementaryWidgetsElementaryEntry parent_instance;
	ElementaryWidgetsElementarySearchEntryPrivate * priv;
	gboolean is_searching;
};

struct _ElementaryWidgetsElementarySearchEntryClass {
	ElementaryWidgetsElementaryEntryClass parent_class;
};

struct _ElementaryTreeView {
	GtkTreeView parent_instance;
	ElementaryTreeViewPrivate * priv;
};

struct _ElementaryTreeViewClass {
	GtkTreeViewClass parent_class;
};

struct _BeatBoxMusicTreeView {
	GtkScrolledWindow parent_instance;
	BeatBoxMusicTreeViewPrivate * priv;
	gint relative_id;
	gchar* hint;
};

struct _BeatBoxMusicTreeViewClass {
	GtkScrolledWindowClass parent_class;
	void (*song_played) (BeatBoxMusicTreeView* self, gint id);
	void (*song_updated) (BeatBoxMusicTreeView* self, gint id);
	void (*song_removed) (BeatBoxMusicTreeView* self, gint id);
	void (*viewDoubleClick) (BeatBoxMusicTreeView* self, GtkTreePath* path, GtkTreeViewColumn* column);
	gboolean (*viewClick) (BeatBoxMusicTreeView* self, GdkEventButton* event);
	void (*columnTurnOffSortingClick) (BeatBoxMusicTreeView* self);
	void (*columnSmartSortingClick) (BeatBoxMusicTreeView* self);
	void (*columnMenuToggled) (BeatBoxMusicTreeView* self);
	void (*songMenuEditClicked) (BeatBoxMusicTreeView* self);
	void (*songEditorSaved) (BeatBoxMusicTreeView* self, GeeLinkedList* songs);
	void (*songMenuQueueClicked) (BeatBoxMusicTreeView* self);
	void (*songMenuPsychicClicked) (BeatBoxMusicTreeView* self);
	void (*songRemoveClicked) (BeatBoxMusicTreeView* self);
	void (*songRateSong0Clicked) (BeatBoxMusicTreeView* self);
	void (*songRateSong1Clicked) (BeatBoxMusicTreeView* self);
	void (*songRateSong2Clicked) (BeatBoxMusicTreeView* self);
	void (*songRateSong3Clicked) (BeatBoxMusicTreeView* self);
	void (*songRateSong4Clicked) (BeatBoxMusicTreeView* self);
	void (*songRateSong5Clicked) (BeatBoxMusicTreeView* self);
};

struct _BeatBoxSideTreeView {
	GtkTreeView parent_instance;
	BeatBoxSideTreeViewPrivate * priv;
	GtkTreeIter library_iter;
	GtkTreeIter library_music_iter;
	GtkTreeIter library_podcasts_iter;
	GtkTreeIter library_audiobooks_iter;
	GtkTreeIter devices_iter;
	GtkTreeIter network_iter;
	GtkTreeIter playlists_iter;
	GtkTreeIter playlists_queue_iter;
	GtkTreeIter playlists_history_iter;
};

struct _BeatBoxSideTreeViewClass {
	GtkTreeViewClass parent_class;
	gboolean (*sideListClick) (BeatBoxSideTreeView* self, GdkEventButton* event);
	void (*smartPlaylistMenuNewClicked) (BeatBoxSideTreeView* self);
	void (*smartPlaylistEditorSaved) (BeatBoxSideTreeView* self, BeatBoxSmartPlaylist* sp);
	void (*playlistMenuNewClicked) (BeatBoxSideTreeView* self);
	void (*playlistNameWindowSaved) (BeatBoxSideTreeView* self, BeatBoxPlaylist* p);
	void (*playlistMenuEditClicked) (BeatBoxSideTreeView* self);
	void (*playlistMenuRemoveClicked) (BeatBoxSideTreeView* self);
};

struct _BeatBoxSongInfo {
	GObject parent_instance;
	BeatBoxSongInfoPrivate * priv;
	BeatBoxSong* song;
	LastFMArtistInfo* artist;
	LastFMTrackInfo* track;
	LastFMAlbumInfo* album;
};

struct _BeatBoxSongInfoClass {
	GObjectClass parent_class;
};

struct _ElementaryWidgetsTopDisplay {
	GtkVBox parent_instance;
	ElementaryWidgetsTopDisplayPrivate * priv;
};

struct _ElementaryWidgetsTopDisplayClass {
	GtkVBoxClass parent_class;
	gboolean (*scale_button_press) (ElementaryWidgetsTopDisplay* self, GdkEventButton* event);
	gboolean (*scale_button_release) (ElementaryWidgetsTopDisplay* self, GdkEventButton* event);
	void (*value_changed) (ElementaryWidgetsTopDisplay* self);
	gboolean (*change_value) (ElementaryWidgetsTopDisplay* self, GtkScrollType scroll, gdouble val);
	void (*player_position_update) (ElementaryWidgetsTopDisplay* self, gint64 position);
};


GType beat_box_beatbox_get_type (void) G_GNUC_CONST;
gint beat_box_beatbox_main (gchar** args, int args_length1);
void beat_box_beatbox_add_stock_images (void);
BeatBoxBeatbox* beat_box_beatbox_new (void);
BeatBoxBeatbox* beat_box_beatbox_construct (GType object_type);
GType beat_box_data_base_manager_get_type (void) G_GNUC_CONST;
BeatBoxDataBaseManager* beat_box_data_base_manager_new (gboolean write, gboolean create);
BeatBoxDataBaseManager* beat_box_data_base_manager_construct (GType object_type, gboolean write, gboolean create);
void beat_box_data_base_manager_create_db (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_load_db (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_resetProgress (BeatBoxDataBaseManager* self, gint items);
gchar* beat_box_data_base_manager_db_location (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_begin_transaction (BeatBoxDataBaseManager* self, const gchar* script);
void beat_box_data_base_manager_commit_transaction (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_drop_table (BeatBoxDataBaseManager* self, const gchar* table);
GeeArrayList* beat_box_data_base_manager_load_song_list_columns (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_initialize_columns (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_save_song_list_columns (BeatBoxDataBaseManager* self, GeeArrayList* columns);
GType beat_box_song_get_type (void) G_GNUC_CONST;
GeeArrayList* beat_box_data_base_manager_load_songs (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_save_songs (BeatBoxDataBaseManager* self, GeeCollection* songs);
void beat_box_data_base_manager_add_song_mass (BeatBoxDataBaseManager* self, BeatBoxSong* s, gboolean saving);
void beat_box_data_base_manager_remove_songs (BeatBoxDataBaseManager* self, GeeCollection* songs);
GType beat_box_playlist_get_type (void) G_GNUC_CONST;
GeeArrayList* beat_box_data_base_manager_load_playlists (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_save_playlists (BeatBoxDataBaseManager* self, GeeCollection* playlists);
GType beat_box_smart_playlist_get_type (void) G_GNUC_CONST;
GeeArrayList* beat_box_data_base_manager_load_smart_playlists (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_save_smart_playlists (BeatBoxDataBaseManager* self, GeeCollection* smarts);
GType last_fm_album_info_get_type (void) G_GNUC_CONST;
void beat_box_data_base_manager_save_albums (BeatBoxDataBaseManager* self, GeeCollection* albums);
GeeCollection* beat_box_data_base_manager_load_albums (BeatBoxDataBaseManager* self);
GType last_fm_artist_info_get_type (void) G_GNUC_CONST;
GeeCollection* beat_box_data_base_manager_load_artists (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_save_artists (BeatBoxDataBaseManager* self, GeeCollection* artists);
GType last_fm_track_info_get_type (void) G_GNUC_CONST;
GeeCollection* beat_box_data_base_manager_load_tracks (BeatBoxDataBaseManager* self);
void beat_box_data_base_manager_save_tracks (BeatBoxDataBaseManager* self, GeeCollection* tracks);
GType beat_box_file_operator_get_type (void) G_GNUC_CONST;
GType beat_box_library_manager_get_type (void) G_GNUC_CONST;
GType beat_box_settings_get_type (void) G_GNUC_CONST;
BeatBoxFileOperator* beat_box_file_operator_new (BeatBoxLibraryManager* lmm, BeatBoxSettings* sett);
BeatBoxFileOperator* beat_box_file_operator_construct (GType object_type, BeatBoxLibraryManager* lmm, BeatBoxSettings* sett);
void beat_box_file_operator_resetProgress (BeatBoxFileOperator* self, gint items);
gint beat_box_file_operator_count_music_files (BeatBoxFileOperator* self, GFile* music_folder);
void beat_box_file_operator_get_music_files (BeatBoxFileOperator* self, GFile* music_folder, GeeLinkedList** songs, GeeLinkedList** not_imported);
void beat_box_file_operator_rescan_music (BeatBoxFileOperator* self, GFile* music_folder, GeeArrayList** current_song_paths, GeeLinkedList** not_imported);
BeatBoxSong* beat_box_file_operator_import_song (BeatBoxFileOperator* self, const gchar* file_path);
gchar* beat_box_file_operator_get_folder (const gchar* file);
gchar* beat_box_file_operator_find_album (BeatBoxFileOperator* self, BeatBoxSong* s);
GdkPixbuf* beat_box_file_operator_save_album (BeatBoxFileOperator* self, BeatBoxSong* s, const gchar* uri);
gchar* beat_box_file_operator_find_artist_image (BeatBoxFileOperator* self, BeatBoxSong* s);
GdkPixbuf* beat_box_file_operator_save_artist_image (BeatBoxFileOperator* self, BeatBoxSong* s, const gchar* uri);
void beat_box_file_operator_save_song (BeatBoxFileOperator* self, BeatBoxSong* s);
void beat_box_file_operator_update_file_hierarchy (BeatBoxFileOperator* self, BeatBoxSong* s);
GType beat_box_library_window_get_type (void) G_GNUC_CONST;
GType beat_box_stream_player_get_type (void) G_GNUC_CONST;
BeatBoxLibraryWindow* beat_box_library_window_new (BeatBoxDataBaseManager* dbm, BeatBoxStreamPlayer* player);
BeatBoxLibraryWindow* beat_box_library_window_construct (GType object_type, BeatBoxDataBaseManager* dbm, BeatBoxStreamPlayer* player);
void beat_box_library_window_build_ui (BeatBoxLibraryWindow* self);
void beat_box_library_window_addSideListItem (BeatBoxLibraryWindow* self, GObject* o);
void beat_box_library_window_progressNotification (BeatBoxLibraryWindow* self, const gchar* message, gdouble progress);
void beat_box_library_window_sideListDoubleClick (BeatBoxLibraryWindow* self, GtkTreePath* path, GtkTreeViewColumn* column);
gboolean beat_box_library_window_updateCurrentSong (BeatBoxLibraryWindow* self);
void beat_box_library_window_song_played (BeatBoxLibraryWindow* self, gint i);
void* beat_box_library_window_lastfm_thread_function (BeatBoxLibraryWindow* self);
gboolean beat_box_library_window_updateSongInfo (BeatBoxLibraryWindow* self);
void beat_box_library_window_previousClicked (BeatBoxLibraryWindow* self);
void beat_box_library_window_playClicked (BeatBoxLibraryWindow* self);
void beat_box_library_window_nextClicked (BeatBoxLibraryWindow* self);
void beat_box_library_window_shuffleClicked (BeatBoxLibraryWindow* self);
void beat_box_library_window_loveButtonClicked (BeatBoxLibraryWindow* self);
void beat_box_library_window_banButtonClicked (BeatBoxLibraryWindow* self);
void beat_box_library_window_searchFieldChanged (BeatBoxLibraryWindow* self);
void beat_box_library_window_musicTreeViewSearched (BeatBoxLibraryWindow* self, const gchar* search);
void beat_box_library_window_sourcesToSongsHandleSet (BeatBoxLibraryWindow* self, GdkRectangle* rectangle);
void beat_box_library_window_on_resize (BeatBoxLibraryWindow* self);
void beat_box_library_window_on_quit (BeatBoxLibraryWindow* self);
void beat_box_library_window_fileSetMusicFolderClick (BeatBoxLibraryWindow* self);
void beat_box_library_window_fileRescanMusicFolderClick (BeatBoxLibraryWindow* self);
void beat_box_library_window_musicAdded (BeatBoxLibraryWindow* self, GeeLinkedList* not_imported);
void beat_box_library_window_musicRescanned (BeatBoxLibraryWindow* self, GeeLinkedList* not_imported);
void beat_box_library_window_songRemovedFromManager (BeatBoxLibraryWindow* self, gint id);
void beat_box_library_window_helpAboutClick (BeatBoxLibraryWindow* self);
void beat_box_library_window_editPreferencesClick (BeatBoxLibraryWindow* self);
void beat_box_library_window_end_of_stream (BeatBoxLibraryWindow* self, BeatBoxSong* s);
void beat_box_library_window_current_position_update (BeatBoxLibraryWindow* self, gint64 position);
void beat_box_library_window_topDisplaySliderMoved (BeatBoxLibraryWindow* self, GtkScrollType scroll, gdouble val);
GType last_fm_core_get_type (void) G_GNUC_CONST;
GType beat_box_song_info_get_type (void) G_GNUC_CONST;
BeatBoxLibraryManager* beat_box_library_manager_new (BeatBoxStreamPlayer* player, BeatBoxDataBaseManager* dbmn, BeatBoxSettings* sett);
BeatBoxLibraryManager* beat_box_library_manager_construct (GType object_type, BeatBoxStreamPlayer* player, BeatBoxDataBaseManager* dbmn, BeatBoxSettings* sett);
void beat_box_library_manager_dbProgress (BeatBoxLibraryManager* self, const gchar* message, gdouble progress);
void beat_box_library_manager_get_music_folders (BeatBoxLibraryManager* self);
void* beat_box_library_manager_set_music_thread_function (BeatBoxLibraryManager* self);
void beat_box_library_manager_rescan_music_folders (BeatBoxLibraryManager* self);
void* beat_box_library_manager_rescan_music_thread_function (BeatBoxLibraryManager* self);
GeeArrayList* beat_box_library_manager_columns (BeatBoxLibraryManager* self);
GeeArrayList* beat_box_library_manager_fresh_columns (BeatBoxLibraryManager* self);
void beat_box_library_manager_save_song_list_columns (BeatBoxLibraryManager* self, GeeArrayList* columns);
gint beat_box_library_manager_playlist_count (BeatBoxLibraryManager* self);
GeeCollection* beat_box_library_manager_playlists (BeatBoxLibraryManager* self);
GeeHashMap* beat_box_library_manager_playlist_hash (BeatBoxLibraryManager* self);
void beat_box_library_manager_save_playlists (BeatBoxLibraryManager* self);
BeatBoxPlaylist* beat_box_library_manager_playlist_from_id (BeatBoxLibraryManager* self, gint id);
gint beat_box_library_manager_add_playlist (BeatBoxLibraryManager* self, BeatBoxPlaylist* p);
void beat_box_library_manager_remove_playlist (BeatBoxLibraryManager* self, gint id);
gint beat_box_library_manager_smart_playlist_count (BeatBoxLibraryManager* self);
GeeCollection* beat_box_library_manager_smart_playlists (BeatBoxLibraryManager* self);
GeeHashMap* beat_box_library_manager_smart_playlist_hash (BeatBoxLibraryManager* self);
BeatBoxSmartPlaylist* beat_box_library_manager_smart_playlist_from_id (BeatBoxLibraryManager* self, gint id);
void beat_box_library_manager_save_smart_playlists (BeatBoxLibraryManager* self);
gint beat_box_library_manager_add_smart_playlist (BeatBoxLibraryManager* self, BeatBoxSmartPlaylist* p);
void beat_box_library_manager_remove_smart_playlist (BeatBoxLibraryManager* self, gint id);
void beat_box_library_manager_clear_songs (BeatBoxLibraryManager* self);
gint beat_box_library_manager_song_count (BeatBoxLibraryManager* self);
GeeCollection* beat_box_library_manager_songs (BeatBoxLibraryManager* self);
GeeCollection* beat_box_library_manager_song_ids (BeatBoxLibraryManager* self);
GeeHashMap* beat_box_library_manager_song_hash (BeatBoxLibraryManager* self);
void beat_box_library_manager_update_song (BeatBoxLibraryManager* self, BeatBoxSong* s);
void beat_box_library_manager_save_songs (BeatBoxLibraryManager* self);
BeatBoxSong* beat_box_library_manager_song_from_id (BeatBoxLibraryManager* self, gint id);
BeatBoxSong* beat_box_library_manager_song_from_name (BeatBoxLibraryManager* self, const gchar* title, const gchar* artist);
GeeCollection* beat_box_library_manager_songs_from_search (BeatBoxLibraryManager* self, const gchar* search, GeeCollection* songs_to_search);
GeeLinkedList* beat_box_library_manager_songs_from_playlist (BeatBoxLibraryManager* self, gint id);
GeeLinkedList* beat_box_library_manager_songs_from_smart_playlist (BeatBoxLibraryManager* self, gint id);
void beat_box_library_manager_add_song (BeatBoxLibraryManager* self, BeatBoxSong* s);
void beat_box_library_manager_remove_song_from_id (BeatBoxLibraryManager* self, gint id);
gboolean beat_box_library_manager_queue_empty (BeatBoxLibraryManager* self);
void beat_box_library_manager_queue_song_by_id (BeatBoxLibraryManager* self, gint id);
void beat_box_library_manager_unqueue_song_by_id (BeatBoxLibraryManager* self, gint id);
gint beat_box_library_manager_peek_queue (BeatBoxLibraryManager* self);
gint beat_box_library_manager_poll_queue (BeatBoxLibraryManager* self);
GeeCollection* beat_box_library_manager_queue (BeatBoxLibraryManager* self);
void beat_box_library_manager_reset_already_played (BeatBoxLibraryManager* self);
void beat_box_library_manager_add_already_played (BeatBoxLibraryManager* self, gint i);
GeeLinkedList* beat_box_library_manager_already_played (BeatBoxLibraryManager* self);
gboolean beat_box_library_manager_is_shuffled (BeatBoxLibraryManager* self);
void beat_box_library_manager_clearCurrent (BeatBoxLibraryManager* self);
void beat_box_library_manager_addToCurrent (BeatBoxLibraryManager* self, gint i);
void beat_box_library_manager_shuffleMusic (BeatBoxLibraryManager* self);
void beat_box_library_manager_unShuffleMusic (BeatBoxLibraryManager* self);
gint beat_box_library_manager_getNext (BeatBoxLibraryManager* self, gboolean play);
gint beat_box_library_manager_getPrevious (BeatBoxLibraryManager* self, gboolean play);
void beat_box_library_manager_playSong (BeatBoxLibraryManager* self, gint id);
void beat_box_library_manager_save_artist (BeatBoxLibraryManager* self, LastFMArtistInfo* artist);
void beat_box_library_manager_save_artists (BeatBoxLibraryManager* self);
gboolean beat_box_library_manager_artist_info_exists (BeatBoxLibraryManager* self, const gchar* artist_key);
LastFMArtistInfo* beat_box_library_manager_get_artist (BeatBoxLibraryManager* self, const gchar* artist_key);
void beat_box_library_manager_save_album (BeatBoxLibraryManager* self, LastFMAlbumInfo* album);
void beat_box_library_manager_save_albums (BeatBoxLibraryManager* self);
gboolean beat_box_library_manager_album_info_exists (BeatBoxLibraryManager* self, const gchar* album_key);
LastFMAlbumInfo* beat_box_library_manager_get_album (BeatBoxLibraryManager* self, const gchar* album_key);
void beat_box_library_manager_save_track (BeatBoxLibraryManager* self, LastFMTrackInfo* track);
void beat_box_library_manager_save_tracks (BeatBoxLibraryManager* self);
gboolean beat_box_library_manager_track_info_exists (BeatBoxLibraryManager* self, const gchar* track_key);
LastFMTrackInfo* beat_box_library_manager_get_track (BeatBoxLibraryManager* self, const gchar* track_key);
gchar* beat_box_library_manager_get_album_location (BeatBoxLibraryManager* self, gint id);
GdkPixbuf* beat_box_library_manager_save_album_locally (BeatBoxLibraryManager* self, gint id, const gchar* album);
gchar* beat_box_library_manager_get_artist_image_location (BeatBoxLibraryManager* self, gint id);
GdkPixbuf* beat_box_library_manager_save_artist_image_locally (BeatBoxLibraryManager* self, gint id, const gchar* image);
gint beat_box_library_manager_get_current_index (BeatBoxLibraryManager* self);
void beat_box_library_manager_set_current_index (BeatBoxLibraryManager* self, gint value);
#define BEAT_BOX_SETTINGS_LASTFM_USERNAME "/apps/beatbox/preferences/lastfm/username"
#define BEAT_BOX_SETTINGS_LASTFM_PASSWORD "/apps/beatbox/preferences/lastfm/pass"
#define BEAT_BOX_SETTINGS_LASTFM_AUTO_LOGIN "/apps/beatbox/preferences/lastfm/auto_login"
#define BEAT_BOX_SETTINGS_LASTFM_SESSION_KEY "/apps/beatbox/preferences/lastfm/lastfm_session_key"
#define BEAT_BOX_SETTINGS_MUSIC_FOLDERS "/apps/beatbox/preferences/music/music_locations"
#define BEAT_BOX_SETTINGS_UPDATE_FOLDER_HIERARCHY "/apps/beatbox/preferences/music/update_folder_hierarchy"
#define BEAT_BOX_SETTINGS_COPY_IMPORTED_MUSIC "/apps/beatbox/preferences/music/copy_imported_music"
#define BEAT_BOX_SETTINGS_WINDOW_MAXIMIZED "/apps/beatbox/preferences/ui/window_maximized"
#define BEAT_BOX_SETTINGS_WINDOW_WIDTH "/apps/beatbox/preferences/ui/window_width"
#define BEAT_BOX_SETTINGS_WINDOW_HEIGHT "/apps/beatbox/preferences/ui/window_height"
#define BEAT_BOX_SETTINGS_SIDEBAR_WIDTH "/apps/beatbox/preferences/ui/sidebar_width"
BeatBoxSettings* beat_box_settings_new (void);
BeatBoxSettings* beat_box_settings_construct (GType object_type);
gchar* beat_box_settings_getMusicFolders (BeatBoxSettings* self);
GeeLinkedList* beat_box_settings_getMusicFoldersList (BeatBoxSettings* self);
gboolean beat_box_settings_getWindowMaximized (BeatBoxSettings* self);
gint beat_box_settings_getWindowWidth (BeatBoxSettings* self);
gint beat_box_settings_getWindowHeight (BeatBoxSettings* self);
gint beat_box_settings_getSidebarWidth (BeatBoxSettings* self);
gboolean beat_box_settings_getUpdateFolderHierarchy (BeatBoxSettings* self);
gboolean beat_box_settings_getCopyImportedMusic (BeatBoxSettings* self);
gchar* beat_box_settings_getLastFMUsername (BeatBoxSettings* self);
gchar* beat_box_settings_getLastFMPassword (BeatBoxSettings* self);
gboolean beat_box_settings_getLastFMAutoLogin (BeatBoxSettings* self);
gchar* beat_box_settings_getLastFMSessionKey (BeatBoxSettings* self);
void beat_box_settings_setMusicFolders (BeatBoxSettings* self, const gchar* path);
void beat_box_settings_setMusicFoldersFromList (BeatBoxSettings* self, GeeLinkedList* locations);
void beat_box_settings_setWindowMaximized (BeatBoxSettings* self, gboolean val);
void beat_box_settings_setWindowWidth (BeatBoxSettings* self, gint val);
void beat_box_settings_setWindowHeight (BeatBoxSettings* self, gint val);
void beat_box_settings_setSidebarWidth (BeatBoxSettings* self, gint val);
void beat_box_settings_setUpdateFolderHierarchy (BeatBoxSettings* self, gboolean val);
void beat_box_settings_setCopyImportedMusic (BeatBoxSettings* self, gboolean val);
void beat_box_settings_setLastFMUsername (BeatBoxSettings* self, const gchar* val);
void beat_box_settings_setLastFMPassword (BeatBoxSettings* self, const gchar* val);
void beat_box_settings_setLastFMAutoLogin (BeatBoxSettings* self, gboolean val);
void beat_box_settings_setLastFMSessionKey (BeatBoxSettings* self, const gchar* val);
BeatBoxStreamPlayer* beat_box_stream_player_new (gchar** args, int args_length1);
BeatBoxStreamPlayer* beat_box_stream_player_construct (GType object_type, gchar** args, int args_length1);
void beat_box_stream_player_play_song (BeatBoxStreamPlayer* self, BeatBoxSong* s);
void beat_box_stream_player_play_stream (BeatBoxStreamPlayer* self);
void beat_box_stream_player_pause_stream (BeatBoxStreamPlayer* self);
void beat_box_stream_player_seek_position (BeatBoxStreamPlayer* self, gint64 position);
GType beat_box_not_imported_window_get_type (void) G_GNUC_CONST;
BeatBoxNotImportedWindow* beat_box_not_imported_window_new (GeeLinkedList* files);
BeatBoxNotImportedWindow* beat_box_not_imported_window_construct (GType object_type, GeeLinkedList* files);
gboolean beat_box_not_imported_window_selectAll (BeatBoxNotImportedWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean beat_box_not_imported_window_deleteSelectedItems (BeatBoxNotImportedWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
void beat_box_not_imported_window_moveToRecycleToggle (BeatBoxNotImportedWindow* self);
void beat_box_not_imported_window_deleteAllClick (BeatBoxNotImportedWindow* self);
void beat_box_not_imported_window_deleteSelectedClick (BeatBoxNotImportedWindow* self);
void beat_box_not_imported_window_ignoreClick (BeatBoxNotImportedWindow* self);
GType beat_box_playlist_name_window_get_type (void) G_GNUC_CONST;
BeatBoxPlaylistNameWindow* beat_box_playlist_name_window_new (BeatBoxPlaylist* original);
BeatBoxPlaylistNameWindow* beat_box_playlist_name_window_construct (GType object_type, BeatBoxPlaylist* original);
void beat_box_playlist_name_window_saveClicked (BeatBoxPlaylistNameWindow* self);
GType beat_box_preferences_window_get_type (void) G_GNUC_CONST;
BeatBoxPreferencesWindow* beat_box_preferences_window_new (BeatBoxLibraryManager* lm);
BeatBoxPreferencesWindow* beat_box_preferences_window_construct (GType object_type, BeatBoxLibraryManager* lm);
void beat_box_preferences_window_buildUI (BeatBoxPreferencesWindow* self);
void beat_box_preferences_window_lastfmLoginClick (BeatBoxPreferencesWindow* self);
void beat_box_preferences_window_musicLocationsAddClicked (BeatBoxPreferencesWindow* self);
void beat_box_preferences_window_musicLocationsRemoveClicked (BeatBoxPreferencesWindow* self);
gboolean beat_box_preferences_window_buildFoldersChanges (BeatBoxPreferencesWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
void beat_box_preferences_window_saveClicked (BeatBoxPreferencesWindow* self);
void beat_box_preferences_window_cancelClicked (BeatBoxPreferencesWindow* self);
GType beat_box_smart_playlist_editor_get_type (void) G_GNUC_CONST;
BeatBoxSmartPlaylistEditor* beat_box_smart_playlist_editor_new (BeatBoxSmartPlaylist* sp);
BeatBoxSmartPlaylistEditor* beat_box_smart_playlist_editor_construct (GType object_type, BeatBoxSmartPlaylist* sp);
void beat_box_smart_playlist_editor_addRow (BeatBoxSmartPlaylistEditor* self);
void beat_box_smart_playlist_editor_addButtonClick (BeatBoxSmartPlaylistEditor* self);
void beat_box_smart_playlist_editor_saveClick (BeatBoxSmartPlaylistEditor* self);
void beat_box_smart_playlist_editor_cancelClick (BeatBoxSmartPlaylistEditor* self);
GType beat_box_smart_playlist_editor_query_get_type (void) G_GNUC_CONST;
GType beat_box_smart_query_get_type (void) G_GNUC_CONST;
BeatBoxSmartPlaylistEditorQuery* beat_box_smart_playlist_editor_query_new (BeatBoxSmartQuery* q);
BeatBoxSmartPlaylistEditorQuery* beat_box_smart_playlist_editor_query_construct (GType object_type, BeatBoxSmartQuery* q);
BeatBoxSmartQuery* beat_box_smart_playlist_editor_query_getQuery (BeatBoxSmartPlaylistEditorQuery* self);
void beat_box_smart_playlist_editor_query_removeClicked (BeatBoxSmartPlaylistEditorQuery* self);
GType beat_box_song_editor_get_type (void) G_GNUC_CONST;
BeatBoxSongEditor* beat_box_song_editor_new (GeeLinkedList* songs, LastFMTrackInfo* track, LastFMArtistInfo* artist, LastFMAlbumInfo* album);
BeatBoxSongEditor* beat_box_song_editor_construct (GType object_type, GeeLinkedList* songs, LastFMTrackInfo* track, LastFMArtistInfo* artist, LastFMAlbumInfo* album);
GtkViewport* beat_box_song_editor_generate_track_page (BeatBoxSongEditor* self, LastFMTrackInfo* track);
GtkViewport* beat_box_song_editor_generate_artist_page (BeatBoxSongEditor* self, LastFMArtistInfo* artist);
GtkViewport* beat_box_song_editor_generate_album_page (BeatBoxSongEditor* self, LastFMAlbumInfo* album);
void beat_box_song_editor_saveClicked (BeatBoxSongEditor* self);
GType beat_box_field_editor_get_type (void) G_GNUC_CONST;
BeatBoxFieldEditor* beat_box_field_editor_new (const gchar* name, const gchar* original, GtkWidget* w);
BeatBoxFieldEditor* beat_box_field_editor_construct (GType object_type, const gchar* name, const gchar* original, GtkWidget* w);
void beat_box_field_editor_entryChanged (BeatBoxFieldEditor* self);
void beat_box_field_editor_textViewChanged (BeatBoxFieldEditor* self);
void beat_box_field_editor_spinButtonChanged (BeatBoxFieldEditor* self);
gboolean beat_box_field_editor_checked (BeatBoxFieldEditor* self);
void beat_box_field_editor_resetClicked (BeatBoxFieldEditor* self);
gchar* beat_box_field_editor_get_value (BeatBoxFieldEditor* self);
#define LAST_FM_CORE_api "a40ea1720028bd40c66b17d7146b3f3b"
#define LAST_FM_CORE_secret "92ba5023f6868e680a3352c71e21243d"
LastFMCore* last_fm_core_new (BeatBoxLibraryManager* lm);
LastFMCore* last_fm_core_construct (GType object_type, BeatBoxLibraryManager* lm);
gchar* last_fm_core_fix_for_url (const gchar* fix);
gchar* last_fm_core_generate_md5 (LastFMCore* self, const gchar* text);
gchar* last_fm_core_generate_signature (LastFMCore* self, const gchar* token, const gchar* method);
gchar* last_fm_core_getToken (LastFMCore* self);
gchar* last_fm_core_getSessionKey (LastFMCore* self, const gchar* token);
gboolean last_fm_core_loveTrack (LastFMCore* self, const gchar* title, const gchar* artist);
gboolean last_fm_core_banTrack (LastFMCore* self, const gchar* title, const gchar* artist);
GeeArrayList* last_fm_core_getSimilarTracks (LastFMCore* self, const gchar* title, const gchar* artist);
void last_fm_core_parse_similar_nodes (LastFMCore* self, xmlNode* node, const gchar* parent);
LastFMAlbumInfo* last_fm_album_info_new_basic (void);
LastFMAlbumInfo* last_fm_album_info_construct_basic (GType object_type);
LastFMAlbumInfo* last_fm_album_info_new_with_info (const gchar* artist, const gchar* album);
LastFMAlbumInfo* last_fm_album_info_construct_with_info (GType object_type, const gchar* artist, const gchar* album);
LastFMAlbumInfo* last_fm_album_info_new_with_doc (xmlDoc* doc);
LastFMAlbumInfo* last_fm_album_info_construct_with_doc (GType object_type, xmlDoc* doc);
GType last_fm_tag_get_type (void) G_GNUC_CONST;
void last_fm_album_info_addTag (LastFMAlbumInfo* self, LastFMTag* t);
void last_fm_album_info_addTagString (LastFMAlbumInfo* self, const gchar* t);
GeeArrayList* last_fm_album_info_tags (LastFMAlbumInfo* self);
GeeArrayList* last_fm_album_info_tagStrings (LastFMAlbumInfo* self);
LastFMAlbumInfo* last_fm_album_info_new (void);
LastFMAlbumInfo* last_fm_album_info_construct (GType object_type);
const gchar* last_fm_album_info_get_name (LastFMAlbumInfo* self);
void last_fm_album_info_set_name (LastFMAlbumInfo* self, const gchar* value);
const gchar* last_fm_album_info_get_artist (LastFMAlbumInfo* self);
void last_fm_album_info_set_artist (LastFMAlbumInfo* self, const gchar* value);
const gchar* last_fm_album_info_get_mbid (LastFMAlbumInfo* self);
void last_fm_album_info_set_mbid (LastFMAlbumInfo* self, const gchar* value);
const gchar* last_fm_album_info_get_url (LastFMAlbumInfo* self);
void last_fm_album_info_set_url (LastFMAlbumInfo* self, const gchar* value);
const gchar* last_fm_album_info_get_releasedate (LastFMAlbumInfo* self);
void last_fm_album_info_set_releasedate (LastFMAlbumInfo* self, const gchar* value);
gint last_fm_album_info_get_listeners (LastFMAlbumInfo* self);
void last_fm_album_info_set_listeners (LastFMAlbumInfo* self, gint value);
gint last_fm_album_info_get_playcount (LastFMAlbumInfo* self);
void last_fm_album_info_set_playcount (LastFMAlbumInfo* self, gint value);
GType last_fm_image_get_type (void) G_GNUC_CONST;
LastFMImage* last_fm_album_info_get_url_image (LastFMAlbumInfo* self);
void last_fm_album_info_set_url_image (LastFMAlbumInfo* self, LastFMImage* value);
LastFMArtistInfo* last_fm_artist_info_new_basic (void);
LastFMArtistInfo* last_fm_artist_info_construct_basic (GType object_type);
LastFMArtistInfo* last_fm_artist_info_new_with_artist (const gchar* artist);
LastFMArtistInfo* last_fm_artist_info_construct_with_artist (GType object_type, const gchar* artist);
LastFMArtistInfo* last_fm_artist_info_new_with_artist_and_url (const gchar* name, const gchar* url);
LastFMArtistInfo* last_fm_artist_info_construct_with_artist_and_url (GType object_type, const gchar* name, const gchar* url);
LastFMArtistInfo* last_fm_artist_info_new_with_doc (xmlDoc* doc);
LastFMArtistInfo* last_fm_artist_info_construct_with_doc (GType object_type, xmlDoc* doc);
void last_fm_artist_info_addSimilarArtist (LastFMArtistInfo* self, LastFMArtistInfo* artist);
GeeArrayList* last_fm_artist_info_similarArtists (LastFMArtistInfo* self);
void last_fm_artist_info_addTag (LastFMArtistInfo* self, LastFMTag* t);
void last_fm_artist_info_addTagString (LastFMArtistInfo* self, const gchar* t);
GeeArrayList* last_fm_artist_info_tags (LastFMArtistInfo* self);
GeeArrayList* last_fm_artist_info_tagStrings (LastFMArtistInfo* self);
LastFMArtistInfo* last_fm_artist_info_new (void);
LastFMArtistInfo* last_fm_artist_info_construct (GType object_type);
const gchar* last_fm_artist_info_get_name (LastFMArtistInfo* self);
void last_fm_artist_info_set_name (LastFMArtistInfo* self, const gchar* value);
const gchar* last_fm_artist_info_get_mbid (LastFMArtistInfo* self);
void last_fm_artist_info_set_mbid (LastFMArtistInfo* self, const gchar* value);
const gchar* last_fm_artist_info_get_url (LastFMArtistInfo* self);
void last_fm_artist_info_set_url (LastFMArtistInfo* self, const gchar* value);
gint last_fm_artist_info_get_streamable (LastFMArtistInfo* self);
void last_fm_artist_info_set_streamable (LastFMArtistInfo* self, gint value);
gint last_fm_artist_info_get_listeners (LastFMArtistInfo* self);
void last_fm_artist_info_set_listeners (LastFMArtistInfo* self, gint value);
gint last_fm_artist_info_get_playcount (LastFMArtistInfo* self);
void last_fm_artist_info_set_playcount (LastFMArtistInfo* self, gint value);
const gchar* last_fm_artist_info_get_published (LastFMArtistInfo* self);
void last_fm_artist_info_set_published (LastFMArtistInfo* self, const gchar* value);
const gchar* last_fm_artist_info_get_summary (LastFMArtistInfo* self);
void last_fm_artist_info_set_summary (LastFMArtistInfo* self, const gchar* value);
const gchar* last_fm_artist_info_get_content (LastFMArtistInfo* self);
void last_fm_artist_info_set_content (LastFMArtistInfo* self, const gchar* value);
LastFMImage* last_fm_artist_info_get_url_image (LastFMArtistInfo* self);
void last_fm_artist_info_set_url_image (LastFMArtistInfo* self, LastFMImage* value);
LastFMImage* last_fm_image_new_basic (void);
LastFMImage* last_fm_image_construct_basic (GType object_type);
LastFMImage* last_fm_image_new_with_url (const gchar* url, gboolean generate);
LastFMImage* last_fm_image_construct_with_url (GType object_type, const gchar* url, gboolean generate);
LastFMImage* last_fm_image_new_with_image (GdkPixbuf* image);
LastFMImage* last_fm_image_construct_with_image (GType object_type, GdkPixbuf* image);
LastFMImage* last_fm_image_new_with_import_string (const gchar* s);
LastFMImage* last_fm_image_construct_with_import_string (GType object_type, const gchar* s);
void last_fm_image_set_size (LastFMImage* self, gint width, gint height);
gchar* last_fm_image_to_string (LastFMImage* self);
LastFMImage* last_fm_image_new (void);
LastFMImage* last_fm_image_construct (GType object_type);
const gchar* last_fm_image_get_url (LastFMImage* self);
void last_fm_image_set_url (LastFMImage* self, const gchar* value);
GdkPixbuf* last_fm_image_get_image (LastFMImage* self);
void last_fm_image_set_image (LastFMImage* self, GdkPixbuf* value);
LastFMTag* last_fm_tag_new_with_string (const gchar* tag);
LastFMTag* last_fm_tag_construct_with_string (GType object_type, const gchar* tag);
LastFMTag* last_fm_tag_new_with_string_and_url (const gchar* tag, const gchar* url);
LastFMTag* last_fm_tag_construct_with_string_and_url (GType object_type, const gchar* tag, const gchar* url);
LastFMTag* last_fm_tag_new (void);
LastFMTag* last_fm_tag_construct (GType object_type);
const gchar* last_fm_tag_get_tag (LastFMTag* self);
void last_fm_tag_set_tag (LastFMTag* self, const gchar* value);
const gchar* last_fm_tag_get_url (LastFMTag* self);
void last_fm_tag_set_url (LastFMTag* self, const gchar* value);
LastFMTrackInfo* last_fm_track_info_new_basic (void);
LastFMTrackInfo* last_fm_track_info_construct_basic (GType object_type);
LastFMTrackInfo* last_fm_track_info_new_with_info (const gchar* artist, const gchar* track);
LastFMTrackInfo* last_fm_track_info_construct_with_info (GType object_type, const gchar* artist, const gchar* track);
LastFMTrackInfo* last_fm_track_info_new_with_doc (xmlDoc* doc);
LastFMTrackInfo* last_fm_track_info_construct_with_doc (GType object_type, xmlDoc* doc);
void last_fm_track_info_addTag (LastFMTrackInfo* self, LastFMTag* t);
void last_fm_track_info_addTagString (LastFMTrackInfo* self, const gchar* t);
GeeArrayList* last_fm_track_info_tags (LastFMTrackInfo* self);
GeeArrayList* last_fm_track_info_tagStrings (LastFMTrackInfo* self);
LastFMTrackInfo* last_fm_track_info_new (void);
LastFMTrackInfo* last_fm_track_info_construct (GType object_type);
gint last_fm_track_info_get_id (LastFMTrackInfo* self);
void last_fm_track_info_set_id (LastFMTrackInfo* self, gint value);
const gchar* last_fm_track_info_get_name (LastFMTrackInfo* self);
void last_fm_track_info_set_name (LastFMTrackInfo* self, const gchar* value);
const gchar* last_fm_track_info_get_artist (LastFMTrackInfo* self);
void last_fm_track_info_set_artist (LastFMTrackInfo* self, const gchar* value);
const gchar* last_fm_track_info_get_url (LastFMTrackInfo* self);
void last_fm_track_info_set_url (LastFMTrackInfo* self, const gchar* value);
gint last_fm_track_info_get_duration (LastFMTrackInfo* self);
void last_fm_track_info_set_duration (LastFMTrackInfo* self, gint value);
gint last_fm_track_info_get_streamable (LastFMTrackInfo* self);
void last_fm_track_info_set_streamable (LastFMTrackInfo* self, gint value);
gint last_fm_track_info_get_playcount (LastFMTrackInfo* self);
void last_fm_track_info_set_playcount (LastFMTrackInfo* self, gint value);
gint last_fm_track_info_get_listeners (LastFMTrackInfo* self);
void last_fm_track_info_set_listeners (LastFMTrackInfo* self, gint value);
const gchar* last_fm_track_info_get_summary (LastFMTrackInfo* self);
void last_fm_track_info_set_summary (LastFMTrackInfo* self, const gchar* value);
const gchar* last_fm_track_info_get_content (LastFMTrackInfo* self);
void last_fm_track_info_set_content (LastFMTrackInfo* self, const gchar* value);
BeatBoxPlaylist* beat_box_playlist_new (void);
BeatBoxPlaylist* beat_box_playlist_construct (GType object_type);
BeatBoxPlaylist* beat_box_playlist_new_with_info (gint rowid, const gchar* name);
BeatBoxPlaylist* beat_box_playlist_construct_with_info (GType object_type, gint rowid, const gchar* name);
GeeLinkedList* beat_box_playlist_songs (BeatBoxPlaylist* self);
void beat_box_playlist_addSong (BeatBoxPlaylist* self, BeatBoxSong* s);
void beat_box_playlist_removeSong (BeatBoxPlaylist* self, BeatBoxSong* s);
void beat_box_playlist_clear (BeatBoxPlaylist* self);
void beat_box_playlist_songs_from_string (BeatBoxPlaylist* self, const gchar* songs);
gchar* beat_box_playlist_songs_to_string (BeatBoxPlaylist* self);
GeeLinkedList* beat_box_playlist_analyze (BeatBoxPlaylist* self, BeatBoxLibraryManager* lm);
gint beat_box_playlist_get_rowid (BeatBoxPlaylist* self);
void beat_box_playlist_set_rowid (BeatBoxPlaylist* self, gint value);
const gchar* beat_box_playlist_get_name (BeatBoxPlaylist* self);
void beat_box_playlist_set_name (BeatBoxPlaylist* self, const gchar* value);
BeatBoxSmartPlaylist* beat_box_smart_playlist_new (void);
BeatBoxSmartPlaylist* beat_box_smart_playlist_construct (GType object_type);
void beat_box_smart_playlist_clearQueries (BeatBoxSmartPlaylist* self);
GeeArrayList* beat_box_smart_playlist_queries (BeatBoxSmartPlaylist* self);
void beat_box_smart_playlist_addQuery (BeatBoxSmartPlaylist* self, BeatBoxSmartQuery* s);
void beat_box_smart_playlist_queries_from_string (BeatBoxSmartPlaylist* self, const gchar* q);
gchar* beat_box_smart_playlist_queries_to_string (BeatBoxSmartPlaylist* self);
GeeLinkedList* beat_box_smart_playlist_analyze (BeatBoxSmartPlaylist* self, BeatBoxLibraryManager* lm);
gboolean beat_box_smart_playlist_song_matches_query (BeatBoxSmartPlaylist* self, BeatBoxSmartQuery* q, BeatBoxSong* s);
gint beat_box_smart_playlist_get_rowid (BeatBoxSmartPlaylist* self);
void beat_box_smart_playlist_set_rowid (BeatBoxSmartPlaylist* self, gint value);
const gchar* beat_box_smart_playlist_get_name (BeatBoxSmartPlaylist* self);
void beat_box_smart_playlist_set_name (BeatBoxSmartPlaylist* self, const gchar* value);
const gchar* beat_box_smart_playlist_get_conditional (BeatBoxSmartPlaylist* self);
void beat_box_smart_playlist_set_conditional (BeatBoxSmartPlaylist* self, const gchar* value);
BeatBoxSmartQuery* beat_box_smart_query_new (void);
BeatBoxSmartQuery* beat_box_smart_query_construct (GType object_type);
BeatBoxSmartQuery* beat_box_smart_query_new_with_info (const gchar* field, const gchar* comparator, const gchar* value);
BeatBoxSmartQuery* beat_box_smart_query_construct_with_info (GType object_type, const gchar* field, const gchar* comparator, const gchar* value);
gint beat_box_smart_query_get_rowid (BeatBoxSmartQuery* self);
void beat_box_smart_query_set_rowid (BeatBoxSmartQuery* self, gint value);
const gchar* beat_box_smart_query_get_field (BeatBoxSmartQuery* self);
void beat_box_smart_query_set_field (BeatBoxSmartQuery* self, const gchar* value);
const gchar* beat_box_smart_query_get_comparator (BeatBoxSmartQuery* self);
void beat_box_smart_query_set_comparator (BeatBoxSmartQuery* self, const gchar* value);
const gchar* beat_box_smart_query_get_value (BeatBoxSmartQuery* self);
void beat_box_smart_query_set_value (BeatBoxSmartQuery* self, const gchar* value);
BeatBoxSong* beat_box_song_new (const gchar* file);
BeatBoxSong* beat_box_song_construct (GType object_type, const gchar* file);
gchar* beat_box_song_pretty_length (BeatBoxSong* self);
gint beat_box_song_calculate_score (BeatBoxSong* self);
gchar* beat_box_song_pretty_last_played (BeatBoxSong* self);
gchar* beat_box_song_pretty_date_added (BeatBoxSong* self);
BeatBoxSong* beat_box_song_copy (BeatBoxSong* self);
const gchar* beat_box_song_get_file (BeatBoxSong* self);
void beat_box_song_set_file (BeatBoxSong* self, const gchar* value);
const gchar* beat_box_song_get_file_directory (BeatBoxSong* self);
void beat_box_song_set_file_directory (BeatBoxSong* self, const gchar* value);
const gchar* beat_box_song_get_file_name (BeatBoxSong* self);
void beat_box_song_set_file_name (BeatBoxSong* self, const gchar* value);
gint beat_box_song_get_file_size (BeatBoxSong* self);
void beat_box_song_set_file_size (BeatBoxSong* self, gint value);
gint beat_box_song_get_rowid (BeatBoxSong* self);
void beat_box_song_set_rowid (BeatBoxSong* self, gint value);
const gchar* beat_box_song_get_title (BeatBoxSong* self);
void beat_box_song_set_title (BeatBoxSong* self, const gchar* value);
const gchar* beat_box_song_get_artist (BeatBoxSong* self);
void beat_box_song_set_artist (BeatBoxSong* self, const gchar* value);
const gchar* beat_box_song_get_album (BeatBoxSong* self);
void beat_box_song_set_album (BeatBoxSong* self, const gchar* value);
const gchar* beat_box_song_get_genre (BeatBoxSong* self);
void beat_box_song_set_genre (BeatBoxSong* self, const gchar* value);
const gchar* beat_box_song_get_comment (BeatBoxSong* self);
void beat_box_song_set_comment (BeatBoxSong* self, const gchar* value);
gint beat_box_song_get_year (BeatBoxSong* self);
void beat_box_song_set_year (BeatBoxSong* self, gint value);
gint beat_box_song_get_track (BeatBoxSong* self);
void beat_box_song_set_track (BeatBoxSong* self, gint value);
gint beat_box_song_get_bitrate (BeatBoxSong* self);
void beat_box_song_set_bitrate (BeatBoxSong* self, gint value);
gint beat_box_song_get_length (BeatBoxSong* self);
void beat_box_song_set_length (BeatBoxSong* self, gint value);
gint beat_box_song_get_samplerate (BeatBoxSong* self);
void beat_box_song_set_samplerate (BeatBoxSong* self, gint value);
gint beat_box_song_get_bpm (BeatBoxSong* self);
void beat_box_song_set_bpm (BeatBoxSong* self, gint value);
gint beat_box_song_get_rating (BeatBoxSong* self);
void beat_box_song_set_rating (BeatBoxSong* self, gint value);
gint beat_box_song_get_score (BeatBoxSong* self);
void beat_box_song_set_score (BeatBoxSong* self, gint value);
gint beat_box_song_get_play_count (BeatBoxSong* self);
void beat_box_song_set_play_count (BeatBoxSong* self, gint value);
gint beat_box_song_get_skip_count (BeatBoxSong* self);
void beat_box_song_set_skip_count (BeatBoxSong* self, gint value);
gint beat_box_song_get_last_played (BeatBoxSong* self);
void beat_box_song_set_last_played (BeatBoxSong* self, gint value);
gint beat_box_song_get_date_added (BeatBoxSong* self);
void beat_box_song_set_date_added (BeatBoxSong* self, gint value);
GType tool_button_with_menu_get_type (void) G_GNUC_CONST;
GType elementary_widgets_app_menu_get_type (void) G_GNUC_CONST;
ElementaryWidgetsAppMenu* elementary_widgets_app_menu_new_from_stock (const gchar* stock_image, GtkIconSize size, const gchar* label, GtkMenu* menu);
ElementaryWidgetsAppMenu* elementary_widgets_app_menu_construct_from_stock (GType object_type, const gchar* stock_image, GtkIconSize size, const gchar* label, GtkMenu* menu);
ElementaryWidgetsAppMenu* elementary_widgets_app_menu_new (GtkImage* image, const gchar* label, GtkMenu* menu);
ElementaryWidgetsAppMenu* elementary_widgets_app_menu_construct (GType object_type, GtkImage* image, const gchar* label, GtkMenu* menu);
GType elementary_widgets_elementary_entry_get_type (void) G_GNUC_CONST;
ElementaryWidgetsElementaryEntry* elementary_widgets_elementary_entry_new (const gchar* hint_string);
ElementaryWidgetsElementaryEntry* elementary_widgets_elementary_entry_construct (GType object_type, const gchar* hint_string);
void elementary_widgets_elementary_entry_hint (ElementaryWidgetsElementaryEntry* self);
void elementary_widgets_elementary_entry_unhint (ElementaryWidgetsElementaryEntry* self);
gchar* elementary_widgets_elementary_entry_get_text (ElementaryWidgetsElementaryEntry* self);
void elementary_widgets_elementary_entry_set_text (ElementaryWidgetsElementaryEntry* self, const gchar* text);
GType elementary_widgets_elementary_search_entry_get_type (void) G_GNUC_CONST;
ElementaryWidgetsElementarySearchEntry* elementary_widgets_elementary_search_entry_new (const gchar* hint_string);
ElementaryWidgetsElementarySearchEntry* elementary_widgets_elementary_search_entry_construct (GType object_type, const gchar* hint_string);
GType elementary_tree_view_get_type (void) G_GNUC_CONST;
ElementaryTreeView* elementary_tree_view_new (void);
ElementaryTreeView* elementary_tree_view_construct (GType object_type);
GType beat_box_music_tree_view_get_type (void) G_GNUC_CONST;
GeeLinkedList* beat_box_music_tree_view_get_songs (BeatBoxMusicTreeView* self);
GList* beat_box_music_tree_view_get_columns (BeatBoxMusicTreeView* self);
BeatBoxMusicTreeView* beat_box_music_tree_view_new (BeatBoxLibraryManager* lmm, BeatBoxLibraryWindow* lww, gint sort);
BeatBoxMusicTreeView* beat_box_music_tree_view_construct (GType object_type, BeatBoxLibraryManager* lmm, BeatBoxLibraryWindow* lww, gint sort);
void beat_box_music_tree_view_set_hint (BeatBoxMusicTreeView* self, const gchar* the_hint);
void beat_box_music_tree_view_set_id (BeatBoxMusicTreeView* self, gint id);
void beat_box_music_tree_view_updateSensitivities (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_buildUI (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_updateColumnVisibilities (BeatBoxMusicTreeView* self);
GType* beat_box_music_tree_view_getColumnTypes (BeatBoxMusicTreeView* self, int* result_length1);
void beat_box_music_tree_view_populateView (BeatBoxMusicTreeView* self, GeeCollection* songs, gboolean is_search);
GtkTreeIter* beat_box_music_tree_view_addSong (BeatBoxMusicTreeView* self, BeatBoxSong* s);
gboolean beat_box_music_tree_view_updateCurrentSong (BeatBoxMusicTreeView* self);
gboolean beat_box_music_tree_view_updateTempSongs (BeatBoxMusicTreeView* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* item);
gboolean beat_box_music_tree_view_updatePlayingIcon (BeatBoxMusicTreeView* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
void beat_box_music_tree_view_song_played (BeatBoxMusicTreeView* self, gint id);
void beat_box_music_tree_view_song_updated (BeatBoxMusicTreeView* self, gint id);
void beat_box_music_tree_view_song_removed (BeatBoxMusicTreeView* self, gint id);
void beat_box_music_tree_view_viewDoubleClick (BeatBoxMusicTreeView* self, GtkTreePath* path, GtkTreeViewColumn* column);
void beat_box_music_tree_view_setAsCurrentList (BeatBoxMusicTreeView* self, const gchar* current_song_path);
gboolean beat_box_music_tree_view_buildCurrentList (BeatBoxMusicTreeView* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean beat_box_music_tree_view_viewClick (BeatBoxMusicTreeView* self, GdkEventButton* event);
void beat_box_music_tree_view_columnTurnOffSortingClick (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_columnSmartSortingClick (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_columnMenuToggled (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songMenuEditClicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songEditorSaved (BeatBoxMusicTreeView* self, GeeLinkedList* songs);
void beat_box_music_tree_view_songMenuQueueClicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songMenuPsychicClicked (BeatBoxMusicTreeView* self);
void* beat_box_music_tree_view_psychic_thread_function (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRemoveClicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRateSong0Clicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRateSong1Clicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRateSong2Clicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRateSong3Clicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRateSong4Clicked (BeatBoxMusicTreeView* self);
void beat_box_music_tree_view_songRateSong5Clicked (BeatBoxMusicTreeView* self);
GType beat_box_side_tree_view_get_type (void) G_GNUC_CONST;
BeatBoxSideTreeView* beat_box_side_tree_view_new (BeatBoxLibraryManager* lmm, BeatBoxLibraryWindow* lww);
BeatBoxSideTreeView* beat_box_side_tree_view_construct (GType object_type, BeatBoxLibraryManager* lmm, BeatBoxLibraryWindow* lww);
void beat_box_side_tree_view_buildUI (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_smartPixTextColumnData (BeatBoxSideTreeView* self, GtkTreeViewColumn* tree_column, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void beat_box_side_tree_view_addBasicItems (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_addItem (BeatBoxSideTreeView* self, GtkTreeIter* parent, GObject* o, GtkWidget* w, const gchar* name, GtkTreeIter* result);
GtkWidget* beat_box_side_tree_view_getSelectedWidget (BeatBoxSideTreeView* self);
GtkWidget* beat_box_side_tree_view_getWidget (BeatBoxSideTreeView* self, GtkTreeIter* iter);
GtkWidget* beat_box_side_tree_view_get_current_widget (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_updatePlayQueue (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_updateAlreadyPlayed (BeatBoxSideTreeView* self);
gboolean beat_box_side_tree_view_sideListClick (BeatBoxSideTreeView* self, GdkEventButton* event);
void beat_box_side_tree_view_resetView (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_smartPlaylistMenuNewClicked (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_smartPlaylistEditorSaved (BeatBoxSideTreeView* self, BeatBoxSmartPlaylist* sp);
void beat_box_side_tree_view_playlistMenuNewClicked (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_playlistNameWindowSaved (BeatBoxSideTreeView* self, BeatBoxPlaylist* p);
void beat_box_side_tree_view_playlistMenuEditClicked (BeatBoxSideTreeView* self);
void beat_box_side_tree_view_playlistMenuRemoveClicked (BeatBoxSideTreeView* self);
BeatBoxSongInfo* beat_box_song_info_new (void);
BeatBoxSongInfo* beat_box_song_info_construct (GType object_type);
gchar* beat_box_song_info_update_file (BeatBoxSongInfo* self, LastFMArtistInfo* art, LastFMTrackInfo* tra, LastFMAlbumInfo* alb, BeatBoxSong* s);
gchar* beat_box_song_info_generate_html (BeatBoxSongInfo* self);
ToolButtonWithMenu* tool_button_with_menu_construct (GType object_type, GtkImage* image, const gchar* label, GtkMenu* _menu, GtkPositionType menu_orientation);
void tool_button_with_menu_popup_menu (ToolButtonWithMenu* self, GdkEventButton* ev);
void tool_button_with_menu_popdown_menu (ToolButtonWithMenu* self);
GtkPositionType tool_button_with_menu_get_menu_orientation (ToolButtonWithMenu* self);
void tool_button_with_menu_set_menu_orientation (ToolButtonWithMenu* self, GtkPositionType value);
GType elementary_widgets_top_display_get_type (void) G_GNUC_CONST;
ElementaryWidgetsTopDisplay* elementary_widgets_top_display_new (BeatBoxLibraryManager* lmm);
ElementaryWidgetsTopDisplay* elementary_widgets_top_display_construct (GType object_type, BeatBoxLibraryManager* lmm);
void elementary_widgets_top_display_set_label_text (ElementaryWidgetsTopDisplay* self, const gchar* text);
gchar* elementary_widgets_top_display_get_label_text (ElementaryWidgetsTopDisplay* self);
void elementary_widgets_top_display_set_label_showing (ElementaryWidgetsTopDisplay* self, gboolean val);
void elementary_widgets_top_display_set_progress_value (ElementaryWidgetsTopDisplay* self, gdouble progress);
void elementary_widgets_top_display_set_scale_range (ElementaryWidgetsTopDisplay* self, gdouble min, gdouble max);
void elementary_widgets_top_display_set_scale_value (ElementaryWidgetsTopDisplay* self, gdouble val);
gboolean elementary_widgets_top_display_scale_button_press (ElementaryWidgetsTopDisplay* self, GdkEventButton* event);
gboolean elementary_widgets_top_display_scale_button_release (ElementaryWidgetsTopDisplay* self, GdkEventButton* event);
void elementary_widgets_top_display_value_changed (ElementaryWidgetsTopDisplay* self);
gboolean elementary_widgets_top_display_change_value (ElementaryWidgetsTopDisplay* self, GtkScrollType scroll, gdouble val);
void elementary_widgets_top_display_show_scale (ElementaryWidgetsTopDisplay* self);
void elementary_widgets_top_display_show_progressbar (ElementaryWidgetsTopDisplay* self);
void elementary_widgets_top_display_player_position_update (ElementaryWidgetsTopDisplay* self, gint64 position);


G_END_DECLS

#endif
