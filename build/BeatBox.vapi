/* BeatBox.vapi generated by valac 0.11.5, do not modify. */

[CCode (cprefix = "BeatBox", lower_case_cprefix = "beat_box_")]
namespace BeatBox {
	[CCode (cheader_filename = "BeatBox.h")]
	public class Beatbox : GLib.Object {
		public Beatbox ();
		public static void add_stock_images ();
		public static int main (string[] args);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class DataBaseManager : GLib.Object {
		public DataBaseManager (bool write, bool create);
		public void add_song_mass (BeatBox.Song s, bool saving);
		public void begin_transaction (string script);
		public void commit_transaction ();
		public void create_db ();
		public string db_location ();
		public void drop_table (string table);
		public void initialize_columns ();
		public Gee.Collection<LastFM.AlbumInfo> load_albums ();
		public Gee.Collection<LastFM.ArtistInfo> load_artists ();
		public void load_db ();
		public Gee.ArrayList<BeatBox.Playlist> load_playlists ();
		public Gee.ArrayList<BeatBox.SmartPlaylist> load_smart_playlists ();
		public Gee.ArrayList<Gtk.TreeViewColumn> load_song_list_columns ();
		public Gee.ArrayList<BeatBox.Song> load_songs ();
		public Gee.Collection<LastFM.TrackInfo> load_tracks ();
		public void remove_songs (Gee.Collection<string> songs);
		public void resetProgress (int items);
		public void save_albums (Gee.Collection<LastFM.AlbumInfo> albums);
		public void save_artists (Gee.Collection<LastFM.ArtistInfo> artists);
		public void save_playlists (Gee.Collection<BeatBox.Playlist> playlists);
		public void save_smart_playlists (Gee.Collection<BeatBox.SmartPlaylist> smarts);
		public void save_song_list_columns (Gee.ArrayList<Gtk.TreeViewColumn> columns);
		public void save_songs (Gee.Collection<BeatBox.Song> songs);
		public void save_tracks (Gee.Collection<LastFM.TrackInfo> tracks);
		public signal void db_progress (string? message, double progress);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class FieldEditor : Gtk.HBox {
		public FieldEditor (string name, string original, Gtk.Widget w);
		public bool checked ();
		public virtual void entryChanged ();
		public string get_value ();
		public virtual void resetClicked ();
		public virtual void spinButtonChanged ();
		public virtual void textViewChanged ();
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class FileOperator : GLib.Object {
		public FileOperator (BeatBox.LibraryManager lmm, BeatBox.Settings sett);
		public int count_music_files (GLib.File music_folder);
		public string? find_album (BeatBox.Song s);
		public string? find_artist_image (BeatBox.Song s);
		public static string get_folder (string file);
		public void get_music_files (GLib.File music_folder, ref Gee.LinkedList<BeatBox.Song> songs, ref Gee.LinkedList<string> not_imported);
		public BeatBox.Song? import_song (string file_path);
		public void rescan_music (GLib.File music_folder, ref Gee.ArrayList<string> current_song_paths, ref Gee.LinkedList<string> not_imported);
		public void resetProgress (int items);
		public Gdk.Pixbuf? save_album (BeatBox.Song s, string uri);
		public Gdk.Pixbuf? save_artist_image (BeatBox.Song s, string uri);
		public void save_song (BeatBox.Song s);
		public void update_file_hierarchy (BeatBox.Song s);
		public signal void fo_progress (string message, double progress);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class LibraryManager : GLib.Object {
		public int _current_index;
		public int _current_shuffled_index;
		public int _played_index;
		public BeatBox.DataBaseManager dbm;
		public BeatBox.FileOperator fo;
		public LastFM.Core lfm;
		public BeatBox.StreamPlayer player;
		public bool playing;
		public bool repeat;
		public BeatBox.Settings settings;
		public bool shuffle;
		public BeatBox.SongInfo song_info;
		public LibraryManager (BeatBox.StreamPlayer player, BeatBox.DataBaseManager dbmn, BeatBox.Settings sett);
		public void addToCurrent (int i);
		public void add_already_played (int i);
		public int add_playlist (BeatBox.Playlist p);
		public int add_smart_playlist (BeatBox.SmartPlaylist p);
		public void add_song (BeatBox.Song s);
		public bool album_info_exists (string album_key);
		public Gee.LinkedList<int> already_played ();
		public bool artist_info_exists (string artist_key);
		public void clearCurrent ();
		public void clear_songs ();
		public Gee.ArrayList<Gtk.TreeViewColumn> columns ();
		public virtual void dbProgress (string? message, double progress);
		public Gee.ArrayList<Gtk.TreeViewColumn> fresh_columns ();
		public int getNext (bool play);
		public int getPrevious (bool play);
		public LastFM.AlbumInfo? get_album (string album_key);
		public string? get_album_location (int id);
		public LastFM.ArtistInfo? get_artist (string artist_key);
		public string? get_artist_image_location (int id);
		public void get_music_folders ();
		public LastFM.TrackInfo? get_track (string track_key);
		public bool is_shuffled ();
		public int peek_queue ();
		public void playSong (int id);
		public int playlist_count ();
		public BeatBox.Playlist playlist_from_id (int id);
		public Gee.HashMap<int,BeatBox.Playlist> playlist_hash ();
		public Gee.Collection<BeatBox.Playlist> playlists ();
		public int poll_queue ();
		public Gee.Collection<int> queue ();
		public bool queue_empty ();
		public void queue_song_by_id (int id);
		public void remove_playlist (int id);
		public void remove_smart_playlist (int id);
		public void remove_song_from_id (int id);
		public void rescan_music_folders ();
		public void* rescan_music_thread_function ();
		public void reset_already_played ();
		public void save_album (LastFM.AlbumInfo album);
		public Gdk.Pixbuf? save_album_locally (int id, string album);
		public void save_albums ();
		public void save_artist (LastFM.ArtistInfo artist);
		public Gdk.Pixbuf? save_artist_image_locally (int id, string image);
		public void save_artists ();
		public void save_playlists ();
		public void save_smart_playlists ();
		public void save_song_list_columns (Gee.ArrayList<Gtk.TreeViewColumn> columns);
		public void save_songs ();
		public void save_track (LastFM.TrackInfo track);
		public void save_tracks ();
		public void* set_music_thread_function ();
		public void shuffleMusic ();
		public int smart_playlist_count ();
		public BeatBox.SmartPlaylist smart_playlist_from_id (int id);
		public Gee.HashMap<int,BeatBox.SmartPlaylist> smart_playlist_hash ();
		public Gee.Collection<BeatBox.SmartPlaylist> smart_playlists ();
		public int song_count ();
		public BeatBox.Song song_from_id (int id);
		public BeatBox.Song song_from_name (string title, string artist);
		public Gee.HashMap<int,BeatBox.Song> song_hash ();
		public Gee.Collection<int> song_ids ();
		public Gee.Collection<BeatBox.Song> songs ();
		public Gee.LinkedList<int> songs_from_playlist (int id);
		public Gee.Collection<int> songs_from_search (string search, Gee.Collection<int> songs_to_search);
		public Gee.LinkedList<int> songs_from_smart_playlist (int id);
		public bool track_info_exists (string track_key);
		public void unShuffleMusic ();
		public void unqueue_song_by_id (int id);
		public void update_song (BeatBox.Song s);
		public int current_index { get; set; }
		public signal void music_added (Gee.LinkedList<string> not_imported);
		public signal void music_rescanned (Gee.LinkedList<string> not_imported);
		public signal void progress_notification (string? message, double progress);
		public signal void song_played (int id);
		public signal void song_queued (int id);
		public signal void song_removed (int id);
		public signal void song_updated (int id);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class LibraryWindow : Gtk.Window {
		public LibraryWindow (BeatBox.DataBaseManager dbm, BeatBox.StreamPlayer player);
		public void addSideListItem (GLib.Object o);
		public virtual void banButtonClicked ();
		public void build_ui ();
		public virtual void current_position_update (int64 position);
		public virtual void editPreferencesClick ();
		public virtual void end_of_stream (BeatBox.Song s);
		public virtual void fileRescanMusicFolderClick ();
		public virtual void fileSetMusicFolderClick ();
		public virtual void helpAboutClick ();
		public void* lastfm_thread_function ();
		public virtual void loveButtonClicked ();
		public virtual void musicAdded (Gee.LinkedList<string> not_imported);
		public virtual void musicRescanned (Gee.LinkedList<string> not_imported);
		public virtual void musicTreeViewSearched (string search);
		public virtual void nextClicked ();
		public virtual void on_quit ();
		public virtual void on_resize ();
		public virtual void playClicked ();
		public virtual void previousClicked ();
		public virtual void progressNotification (string? message, double progress);
		public virtual void searchFieldChanged ();
		public virtual void shuffleClicked ();
		public virtual void sideListDoubleClick (Gtk.TreePath path, Gtk.TreeViewColumn column);
		public virtual void songRemovedFromManager (int id);
		public virtual void song_played (int i);
		public virtual void sourcesToSongsHandleSet (Gdk.Rectangle rectangle);
		public virtual void topDisplaySliderMoved (Gtk.ScrollType scroll, double val);
		public bool updateCurrentSong ();
		public bool updateSongInfo ();
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class MusicTreeView : Gtk.ScrolledWindow {
		public string hint;
		public int relative_id;
		public MusicTreeView (BeatBox.LibraryManager lmm, BeatBox.LibraryWindow lww, int sort);
		public Gtk.TreeIter? addSong (BeatBox.Song s);
		public bool buildCurrentList (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public void buildUI ();
		public virtual void columnMenuToggled ();
		public virtual void columnSmartSortingClick ();
		public virtual void columnTurnOffSortingClick ();
		public GLib.Type[] getColumnTypes ();
		public GLib.List<Gtk.TreeViewColumn> get_columns ();
		public Gee.LinkedList<int> get_songs ();
		public void populateView (Gee.Collection<int> songs, bool is_search);
		public void* psychic_thread_function ();
		public void setAsCurrentList (string current_song_path);
		public void set_hint (string the_hint);
		public void set_id (int id);
		public virtual void songEditorSaved (Gee.LinkedList<BeatBox.Song> songs);
		public virtual void songMenuEditClicked ();
		public virtual void songMenuPsychicClicked ();
		public virtual void songMenuQueueClicked ();
		public virtual void songRateSong0Clicked ();
		public virtual void songRateSong1Clicked ();
		public virtual void songRateSong2Clicked ();
		public virtual void songRateSong3Clicked ();
		public virtual void songRateSong4Clicked ();
		public virtual void songRateSong5Clicked ();
		public virtual void songRemoveClicked ();
		public virtual void song_played (int id);
		public virtual void song_removed (int id);
		public virtual void song_updated (int id);
		public void updateColumnVisibilities ();
		public bool updateCurrentSong ();
		public bool updatePlayingIcon (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public void updateSensitivities ();
		public bool updateTempSongs (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter item);
		public virtual bool viewClick (Gdk.EventButton event);
		public virtual void viewDoubleClick (Gtk.TreePath path, Gtk.TreeViewColumn column);
		public signal void view_being_searched (string key);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class NotImportedWindow : Gtk.Window {
		public NotImportedWindow (Gee.LinkedList<string> files);
		public virtual void deleteAllClick ();
		public virtual void deleteSelectedClick ();
		public bool deleteSelectedItems (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public virtual void ignoreClick ();
		public virtual void moveToRecycleToggle ();
		public bool selectAll (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class Playlist : GLib.Object {
		public Playlist ();
		public void addSong (BeatBox.Song s);
		public Gee.LinkedList<int> analyze (BeatBox.LibraryManager lm);
		public void clear ();
		public void removeSong (BeatBox.Song s);
		public Gee.LinkedList<BeatBox.Song> songs ();
		public void songs_from_string (string songs);
		public string songs_to_string ();
		public Playlist.with_info (int rowid, string name);
		public string name { get; set; }
		public int rowid { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class PlaylistNameWindow : Gtk.Window {
		public Gtk.Button _cancel;
		public Gtk.Entry _name;
		public BeatBox.Playlist _original;
		public Gtk.Button _save;
		public PlaylistNameWindow (BeatBox.Playlist original);
		public virtual void saveClicked ();
		public signal void playlist_saved (BeatBox.Playlist p);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class PreferencesWindow : Gtk.Window {
		public PreferencesWindow (BeatBox.LibraryManager lm);
		public bool buildFoldersChanges (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public void buildUI ();
		public virtual void cancelClicked ();
		public virtual void lastfmLoginClick ();
		public virtual void musicLocationsAddClicked ();
		public virtual void musicLocationsRemoveClicked ();
		public virtual void saveClicked ();
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class Settings : GLib.Object {
		public const string COPY_IMPORTED_MUSIC;
		public const string LASTFM_AUTO_LOGIN;
		public const string LASTFM_PASSWORD;
		public const string LASTFM_SESSION_KEY;
		public const string LASTFM_USERNAME;
		public const string MUSIC_FOLDERS;
		public const string SIDEBAR_WIDTH;
		public const string UPDATE_FOLDER_HIERARCHY;
		public const string WINDOW_HEIGHT;
		public const string WINDOW_MAXIMIZED;
		public const string WINDOW_WIDTH;
		public Settings ();
		public bool getCopyImportedMusic ();
		public bool getLastFMAutoLogin ();
		public string getLastFMPassword ();
		public string getLastFMSessionKey ();
		public string getLastFMUsername ();
		public string getMusicFolders ();
		public Gee.LinkedList<string> getMusicFoldersList ();
		public int getSidebarWidth ();
		public bool getUpdateFolderHierarchy ();
		public int getWindowHeight ();
		public bool getWindowMaximized ();
		public int getWindowWidth ();
		public void setCopyImportedMusic (bool val);
		public void setLastFMAutoLogin (bool val);
		public void setLastFMPassword (string val);
		public void setLastFMSessionKey (string val);
		public void setLastFMUsername (string val);
		public void setMusicFolders (string path);
		public void setMusicFoldersFromList (Gee.LinkedList<string> locations);
		public void setSidebarWidth (int val);
		public void setUpdateFolderHierarchy (bool val);
		public void setWindowHeight (int val);
		public void setWindowMaximized (bool val);
		public void setWindowWidth (int val);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SideTreeView : Gtk.TreeView {
		public Gtk.TreeIter devices_iter;
		public Gtk.TreeIter library_audiobooks_iter;
		public Gtk.TreeIter library_iter;
		public Gtk.TreeIter library_music_iter;
		public Gtk.TreeIter library_podcasts_iter;
		public Gtk.TreeIter network_iter;
		public Gtk.TreeIter playlists_history_iter;
		public Gtk.TreeIter playlists_iter;
		public Gtk.TreeIter playlists_queue_iter;
		public SideTreeView (BeatBox.LibraryManager lmm, BeatBox.LibraryWindow lww);
		public void addBasicItems ();
		public Gtk.TreeIter addItem (Gtk.TreeIter? parent, GLib.Object? o, Gtk.Widget w, string name);
		public void buildUI ();
		public Gtk.Widget getSelectedWidget ();
		public Gtk.Widget getWidget (Gtk.TreeIter iter);
		public Gtk.Widget get_current_widget ();
		public virtual void playlistMenuEditClicked ();
		public virtual void playlistMenuNewClicked ();
		public virtual void playlistMenuRemoveClicked ();
		public virtual void playlistNameWindowSaved (BeatBox.Playlist p);
		public void resetView ();
		public virtual bool sideListClick (Gdk.EventButton event);
		public void smartPixTextColumnData (Gtk.TreeViewColumn tree_column, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public virtual void smartPlaylistEditorSaved (BeatBox.SmartPlaylist sp);
		public virtual void smartPlaylistMenuNewClicked ();
		public void updateAlreadyPlayed ();
		public void updatePlayQueue ();
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SmartPlaylist : GLib.Object {
		public int query_count;
		public SmartPlaylist ();
		public void addQuery (BeatBox.SmartQuery s);
		public Gee.LinkedList<int> analyze (BeatBox.LibraryManager lm);
		public void clearQueries ();
		public Gee.ArrayList<BeatBox.SmartQuery> queries ();
		public void queries_from_string (string q);
		public string queries_to_string ();
		public bool song_matches_query (BeatBox.SmartQuery q, BeatBox.Song s);
		public string conditional { get; set; }
		public string name { get; set; }
		public int rowid { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SmartPlaylistEditor : Gtk.Window {
		public SmartPlaylistEditor (BeatBox.SmartPlaylist sp);
		public virtual void addButtonClick ();
		public void addRow ();
		public virtual void cancelClick ();
		public virtual void saveClick ();
		public signal void playlist_saved (BeatBox.SmartPlaylist sp);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SmartPlaylistEditorQuery : GLib.Object {
		public Gtk.HBox _box;
		public Gee.HashMap<string,int> comparators;
		public Gee.HashMap<string,int> fields;
		public SmartPlaylistEditorQuery (BeatBox.SmartQuery q);
		public BeatBox.SmartQuery getQuery ();
		public virtual void removeClicked ();
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SmartQuery : GLib.Object {
		public SmartQuery ();
		public SmartQuery.with_info (string field, string comparator, string value);
		public string comparator { get; set; }
		public string field { get; set; }
		public int rowid { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class Song : GLib.Object {
		public Song (string file);
		public int calculate_score ();
		public BeatBox.Song copy ();
		public string pretty_date_added ();
		public string pretty_last_played ();
		public string pretty_length ();
		public string album { get; set; }
		public string artist { get; set; }
		public int bitrate { get; set; }
		public int bpm { get; set; }
		public string comment { get; set; }
		public int date_added { get; set; }
		public string file { get; set; }
		public string file_directory { get; set; }
		public string file_name { get; set; }
		public int file_size { get; set; }
		public string genre { get; set; }
		public int last_played { get; set; }
		public int length { get; set; }
		public int play_count { get; set; }
		public int rating { get; set; }
		public int rowid { get; set; }
		public int samplerate { get; set; }
		public int score { get; set; }
		public int skip_count { get; set; }
		public string title { get; set; }
		public int track { get; set; }
		public int year { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SongEditor : Gtk.Window {
		public SongEditor (Gee.LinkedList<BeatBox.Song> songs, LastFM.TrackInfo? track, LastFM.ArtistInfo? artist, LastFM.AlbumInfo? album);
		public Gtk.Viewport generate_album_page (LastFM.AlbumInfo album);
		public Gtk.Viewport generate_artist_page (LastFM.ArtistInfo artist);
		public Gtk.Viewport generate_track_page (LastFM.TrackInfo track);
		public virtual void saveClicked ();
		public signal void songs_saved (Gee.LinkedList<BeatBox.Song> songs);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class SongInfo : GLib.Object {
		public LastFM.AlbumInfo album;
		public LastFM.ArtistInfo artist;
		public BeatBox.Song song;
		public LastFM.TrackInfo track;
		public SongInfo ();
		public string generate_html ();
		public string update_file (LastFM.ArtistInfo art, LastFM.TrackInfo tra, LastFM.AlbumInfo alb, BeatBox.Song s);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class StreamPlayer : GLib.Object {
		public StreamPlayer (string[] args);
		public void pause_stream ();
		public void play_song (BeatBox.Song s);
		public void play_stream ();
		public void seek_position (int64 position);
		public signal void current_position_update (int64 position);
		public signal void end_of_stream (BeatBox.Song s);
	}
}
[CCode (cprefix = "LastFM", lower_case_cprefix = "last_fm_")]
namespace LastFM {
	[CCode (cheader_filename = "BeatBox.h")]
	public class AlbumInfo : GLib.Object {
		public AlbumInfo ();
		public void addTag (LastFM.Tag t);
		public void addTagString (string t);
		public AlbumInfo.basic ();
		public Gee.ArrayList<string> tagStrings ();
		public Gee.ArrayList<LastFM.Tag> tags ();
		public AlbumInfo.with_doc (Xml.Doc* doc);
		public AlbumInfo.with_info (string artist, string album);
		public string artist { get; set; }
		public int listeners { get; set; }
		public string mbid { get; set; }
		public string name { get; set; }
		public int playcount { get; set; }
		public string releasedate { get; set; }
		public string url { get; set; }
		public LastFM.Image url_image { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class ArtistInfo : GLib.Object {
		public ArtistInfo ();
		public void addSimilarArtist (LastFM.ArtistInfo artist);
		public void addTag (LastFM.Tag t);
		public void addTagString (string t);
		public ArtistInfo.basic ();
		public Gee.ArrayList<LastFM.ArtistInfo> similarArtists ();
		public Gee.ArrayList<string> tagStrings ();
		public Gee.ArrayList<LastFM.Tag> tags ();
		public ArtistInfo.with_artist (string artist);
		public ArtistInfo.with_artist_and_url (string name, string url);
		public ArtistInfo.with_doc (Xml.Doc* doc);
		public string content { get; set; }
		public int listeners { get; set; }
		public string mbid { get; set; }
		public string name { get; set; }
		public int playcount { get; set; }
		public string published { get; set; }
		public int streamable { get; set; }
		public string summary { get; set; }
		public string url { get; set; }
		public LastFM.Image url_image { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class Core : GLib.Object {
		public string session_key;
		public string token;
		public const string api;
		public const string secret;
		public Core (BeatBox.LibraryManager lm);
		public bool banTrack (string title, string artist);
		public static string fix_for_url (string fix);
		public string generate_md5 (string text);
		public string generate_signature (string token, string method);
		public string? getSessionKey (string token);
		public Gee.ArrayList<BeatBox.Song> getSimilarTracks (string title, string artist);
		public string? getToken ();
		public bool loveTrack (string title, string artist);
		public void parse_similar_nodes (Xml.Node* node, string parent);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class Image : GLib.Object {
		public Image ();
		public Image.basic ();
		public void set_size (int width, int height);
		public string to_string ();
		public Image.with_image (Gdk.Pixbuf image);
		public Image.with_import_string (string s);
		public Image.with_url (string url, bool generate);
		public Gdk.Pixbuf image { get; set; }
		public string url { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class Tag : GLib.Object {
		public Tag ();
		public Tag.with_string (string tag);
		public Tag.with_string_and_url (string tag, string url);
		public string tag { get; set; }
		public string url { get; set; }
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class TrackInfo : GLib.Object {
		public TrackInfo ();
		public void addTag (LastFM.Tag t);
		public void addTagString (string t);
		public TrackInfo.basic ();
		public Gee.ArrayList<string> tagStrings ();
		public Gee.ArrayList<LastFM.Tag> tags ();
		public TrackInfo.with_doc (Xml.Doc* doc);
		public TrackInfo.with_info (string artist, string track);
		public string artist { get; set; }
		public string content { get; set; }
		public int duration { get; set; }
		public int id { get; set; }
		public int listeners { get; set; }
		public string name { get; set; }
		public int playcount { get; set; }
		public int streamable { get; set; }
		public string summary { get; set; }
		public string url { get; set; }
	}
}
[CCode (cprefix = "ElementaryWidgets", lower_case_cprefix = "elementary_widgets_")]
namespace ElementaryWidgets {
	[CCode (cheader_filename = "BeatBox.h")]
	public class AppMenu : ToolButtonWithMenu {
		public AppMenu (Gtk.Image image, string label, Gtk.Menu menu);
		public AppMenu.from_stock (string stock_image, Gtk.IconSize size, string label, Gtk.Menu menu);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class ElementaryEntry : Gtk.Entry {
		public string hint_string;
		public ElementaryEntry (string hint_string);
		public new string get_text ();
		protected void hint ();
		public new void set_text (string text);
		protected void unhint ();
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class ElementarySearchEntry : ElementaryWidgets.ElementaryEntry {
		public bool is_searching;
		public ElementarySearchEntry (string hint_string);
	}
	[CCode (cheader_filename = "BeatBox.h")]
	public class TopDisplay : Gtk.VBox {
		public TopDisplay (BeatBox.LibraryManager lmm);
		public virtual bool change_value (Gtk.ScrollType scroll, double val);
		public string get_label_text ();
		public virtual void player_position_update (int64 position);
		public virtual bool scale_button_press (Gdk.EventButton event);
		public virtual bool scale_button_release (Gdk.EventButton event);
		public void set_label_showing (bool val);
		public void set_label_text (string text);
		public void set_progress_value (double progress);
		public void set_scale_range (double min, double max);
		public void set_scale_value (double val);
		public void show_progressbar ();
		public void show_scale ();
		public virtual void value_changed ();
		public signal void scale_value_changed (Gtk.ScrollType scroll, double val);
	}
}
[CCode (cheader_filename = "BeatBox.h")]
public class ElementaryTreeView : Gtk.TreeView {
	public ElementaryTreeView ();
}
[CCode (cheader_filename = "BeatBox.h")]
public abstract class ToolButtonWithMenu : Gtk.ToggleToolButton {
	protected Gtk.Menu menu;
	public ToolButtonWithMenu (Gtk.Image image, string label, Gtk.Menu _menu, Gtk.PositionType menu_orientation = PositionType.LEFT);
	protected void popdown_menu ();
	protected new void popup_menu (Gdk.EventButton? ev);
	public override void show_all ();
	protected Gtk.PositionType menu_orientation { get; set; }
}
