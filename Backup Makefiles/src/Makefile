# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/beatbox
pkgincludedir = $(includedir)/beatbox
pkglibdir = $(libdir)/beatbox
pkglibexecdir = $(libexecdir)/beatbox
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = beatbox$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/intltool.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__objects_1 = beatbox-BeatBox.$(OBJEXT) \
	beatbox-DataBaseManager.$(OBJEXT) \
	beatbox-DataBaseUpdater.$(OBJEXT) \
	beatbox-FileOperator.$(OBJEXT) \
	beatbox-LibraryManager.$(OBJEXT) \
	beatbox-LibraryWindow.$(OBJEXT) beatbox-Settings.$(OBJEXT) \
	beatbox-StreamPlayer.$(OBJEXT) \
	beatbox-NotImportedWindow.$(OBJEXT) \
	beatbox-PlaylistNameWindow.$(OBJEXT) \
	beatbox-PreferencesWindow.$(OBJEXT) \
	beatbox-SmartPlaylistEditor.$(OBJEXT) \
	beatbox-SongEditor.$(OBJEXT) beatbox-AlbumInfo.$(OBJEXT) \
	beatbox-ArtistInfo.$(OBJEXT) beatbox-Image.$(OBJEXT) \
	beatbox-LastFM.$(OBJEXT) beatbox-SimilarSongs.$(OBJEXT) \
	beatbox-Tag.$(OBJEXT) beatbox-TrackInfo.$(OBJEXT) \
	beatbox-MediaKeyListener.$(OBJEXT) beatbox-Playlist.$(OBJEXT) \
	beatbox-SmartPlaylist.$(OBJEXT) beatbox-SmartQuery.$(OBJEXT) \
	beatbox-Song.$(OBJEXT) beatbox-SongInfo.$(OBJEXT) \
	beatbox-SoundMenuIntegration.$(OBJEXT) \
	beatbox-TreeViewSetup.$(OBJEXT) beatbox-AppMenu.$(OBJEXT) \
	beatbox-ElementaryEntry.$(OBJEXT) \
	beatbox-ElementaryTreeView.$(OBJEXT) \
	beatbox-InfoPanel.$(OBJEXT) beatbox-MusicTreeView.$(OBJEXT) \
	beatbox-RatingWidget.$(OBJEXT) \
	beatbox-ScrollingLabel.$(OBJEXT) \
	beatbox-SideTreeView.$(OBJEXT) beatbox-SimilarPane.$(OBJEXT) \
	beatbox-SimilarSongsView.$(OBJEXT) \
	beatbox-SimpleOptionChooser.$(OBJEXT) \
	beatbox-ToolButtonWithMenu.$(OBJEXT) \
	beatbox-TopDisplay.$(OBJEXT) beatbox-Welcome.$(OBJEXT)
am__objects_2 =
am_beatbox_OBJECTS = $(am__objects_1) $(am__objects_2)
nodist_beatbox_OBJECTS = $(am__objects_2)
beatbox_OBJECTS = $(am_beatbox_OBJECTS) $(nodist_beatbox_OBJECTS)
am__DEPENDENCIES_1 =
beatbox_DEPENDENCIES = $(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC    " $@;
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD  " $@;
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN   " $@;
SOURCES = $(beatbox_SOURCES) $(nodist_beatbox_SOURCES)
DIST_SOURCES = $(beatbox_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/scott/beat-box/missing --run aclocal-1.11
ACLOCAL_AMFLAGS = ${ACLOCAL_FLAGS}
ALL_CFLAGS = -pthread -DORBIT2=1 -I/usr/local/include/gio-unix-2.0/ -I/usr/local/include/glib-2.0 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/sqlheavy/sqlheavy-0.1 -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12 -I/usr/include/gee-1.0 -I/usr/include/gstreamer-0.10 -I/usr/include/libxml2 -I/usr/include/webkit-1.0 -I/usr/include/libsoup-2.4 -I/usr/include/gconf/2 -I/usr/include/orbit-2.0 -I/usr/include/unique-1.0 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
ALL_LIBS = -pthread -L/usr/local/lib -L/lib -lgee -lgstreamer-0.10 -lsqlheavy0.1 -lwebkit-1.0 -lsoup-2.4 -lxml2 -lgconf-2 -lunique-1.0 -lnotify -lgtk-x11-2.0 -ldbus-glib-1 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lm -lcairo -lpng12 -lpango-1.0 -lfreetype -lfontconfig -lgmodule-2.0 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
ALL_LINGUAS = 
AMTAR = ${SHELL} /home/scott/beat-box/missing --run tar
AM_DEFAULT_VERBOSITY = 0
AR = ar
AS = as
AUTOCONF = ${SHELL} /home/scott/beat-box/missing --run autoconf
AUTOHEADER = ${SHELL} /home/scott/beat-box/missing --run autoheader
AUTOMAKE = ${SHELL} /home/scott/beat-box/missing --run automake-1.11
AWK = mawk
CATALOGS = 
CATOBJEXT = .gmo
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CORE_CFLAGS = -pthread -DORBIT2=1 -I/usr/local/include/glib-2.0 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/gio-unix-2.0/ -I/usr/local/include/sqlheavy/sqlheavy-0.1 -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12 -I/usr/include/gee-1.0 -I/usr/include/gstreamer-0.10 -I/usr/include/libxml2 -I/usr/include/taglib -I/usr/include/webkit-1.0 -I/usr/include/libsoup-2.4 -I/usr/include/gconf/2 -I/usr/include/orbit-2.0 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/unique-1.0    
CORE_LIBS = -pthread -L/usr/local/lib -L/lib -lgee -lgstreamer-0.10 -ltag_c -ltag -lsqlheavy0.1 -lwebkit-1.0 -lsoup-2.4 -lxml2 -lgconf-2 -lnotify -ldbus-glib-1 -ldbus-1 -lpthread -lunique-1.0 -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lm -lcairo -lpng12 -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0   
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DATADIRNAME = share
DBUSSERVICEDIR = /usr/share/dbus-1/services
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISABLE_DEPRECATED_CFLAGS = -DG_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGDK_PIXBUF_DISABLE_DEPRECATED
DLLTOOL = dlltool
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GETTEXT_PACKAGE = beatbox
GLIB_COMPILE_SCHEMAS = /usr/local/bin/glib-compile-schemas
GLIB_REQUIRED = 2.28.0
GMOFILES = 
GMSGFMT = /usr/bin/msgfmt
GREP = /bin/grep
GSETTINGS_DISABLE_SCHEMAS_COMPILE = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
INTLTOOL_EXTRACT = /usr/local/bin/intltool-extract
INTLTOOL_MERGE = /usr/local/bin/intltool-merge
INTLTOOL_PERL = /usr/bin/perl
INTLTOOL_UPDATE = /usr/local/bin/intltool-update
LD = /usr/bin/ld
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = 
MAKEINFO = ${SHELL} /home/scott/beat-box/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MKINSTALLDIRS = ./mkinstalldirs
MSGFMT = /usr/bin/msgfmt
MSGFMT_OPTS = -c
MSGMERGE = /usr/bin/msgmerge
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = beatbox
PACKAGE_BUGREPORT = https://launchpad.net/marlin
PACKAGE_NAME = beatbox
PACKAGE_STRING = beatbox 0.1
PACKAGE_TARNAME = beatbox
PACKAGE_URL = 
PACKAGE_VERSION = 0.1
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
POFILES = 
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
USE_NLS = yes
VALAC = /usr/bin/valac
VERSION = 0.1
XGETTEXT = /usr/bin/xgettext
abs_builddir = /home/scott/beat-box/src
abs_srcdir = /home/scott/beat-box/src
abs_top_builddir = /home/scott/beat-box
abs_top_srcdir = /home/scott/beat-box
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=ustar -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
gsettingsschemadir = ${datarootdir}/glib-2.0/schemas
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/scott/beat-box/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = /usr/local/share/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
DATADIR = $(datadir)
beatbox_CPPFLAGS = \
    -I$(top_srcdir) \
    $(CORE_CFLAGS) \
    -DVERSION="\"$(VERSION)\"" 	                    \
    $(NULL)

beatbox_VALAFLAGS = \
    -C \
    -H beatbox-vala.h \
    --pkg gtk+-2.0 \
	--pkg glib-2.0 \
    --pkg gio-2.0 \
    --pkg gee-1.0 \
	--pkg unique-1.0 \
	--pkg taglib_c \
	--pkg webkit-1.0 \
	--pkg gstreamer-0.10 \
	--pkg libxml-2.0 \
	--pkg libnotify \
	--pkg sqlheavy-0.1 \
	--pkg gconf-2.0 \
    -g \
    $(NULL)

beatbox_LDADD = \
    $(CORE_LIBS) \
    $(NULL)

BUILT_SOURCES = \
    beatbox.vala.stamp \
    $(NULL)

beatbox_VALASOURCES = \
	BeatBox.vala								\
	DataBaseManager.vala					\
	DataBaseUpdater.vala					\
	FileOperator.vala						\
	LibraryManager.vala						\
	LibraryWindow.vala						\
	Settings.vala							\
	StreamPlayer.vala						\
	Dialogs/NotImportedWindow.vala			\
	Dialogs/PlaylistNameWindow.vala			\
	Dialogs/PreferencesWindow.vala			\
	Dialogs/SmartPlaylistEditor.vala		\
	Dialogs/SongEditor.vala					\
	LastFM/AlbumInfo.vala					\
	LastFM/ArtistInfo.vala					\
	LastFM/Image.vala						\
	LastFM/LastFM.vala						\
	LastFM/SimilarSongs.vala				\
	LastFM/Tag.vala							\
	LastFM/TrackInfo.vala					\
	Objects/MediaKeyListener.vala			\
	Objects/Playlist.vala					\
	Objects/SmartPlaylist.vala				\
	Objects/SmartQuery.vala					\
	Objects/Song.vala						\
	Objects/SongInfo.vala					\
	Objects/SoundMenuIntegration.vala		\
	Objects/TreeViewSetup.vala				\
	Widgets/AppMenu.vala					\
	Widgets/ElementaryEntry.vala			\
	Widgets/ElementaryTreeView.vala			\
	Widgets/InfoPanel.vala					\
	Widgets/MusicTreeView.vala				\
	Widgets/MusicTreeModel.vala				\
	Widgets/RatingWidget.vala				\
	Widgets/ScrollingLabel.vala				\
	Widgets/SideTreeView.vala				\
	Widgets/SimilarPane.vala				\
	Widgets/SimilarSongsView.vala			\
	Widgets/SimpleOptionChooser.vala		\
	Widgets/ToolButtonWithMenu.vala			\
	Widgets/TopDisplay.vala					\
	Widgets/Welcome.vala					\
    $(NULL)

beatbox_CSOURCES = \
	$(NULL)

beatbox_SOURCES = \
    $(beatbox_VALASOURCES:.vala=.c)         \
	$(beatbox_CSOURCES)						\
    $(NULL)

nodist_beatbox_SOURCES = \
    $(BUILT_SOURCES) \
	$(NULL)

EXTRA_DIST = \
	beatbox.vala.stamp \
	$(beatbox_VALASOURCES) \
	$(NULL)

CLEANFILES = \
    $(BUILT_SOURCES) \
	$(beatbox_VALASOURCES:.vala=.c) \
	$(NULL)

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
beatbox$(EXEEXT): $(beatbox_OBJECTS) $(beatbox_DEPENDENCIES) 
	@rm -f beatbox$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(beatbox_OBJECTS) $(beatbox_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/beatbox-AlbumInfo.Po
include ./$(DEPDIR)/beatbox-AppMenu.Po
include ./$(DEPDIR)/beatbox-ArtistInfo.Po
include ./$(DEPDIR)/beatbox-BeatBox.Po
include ./$(DEPDIR)/beatbox-DataBaseManager.Po
include ./$(DEPDIR)/beatbox-DataBaseUpdater.Po
include ./$(DEPDIR)/beatbox-ElementaryEntry.Po
include ./$(DEPDIR)/beatbox-ElementaryTreeView.Po
include ./$(DEPDIR)/beatbox-FileOperator.Po
include ./$(DEPDIR)/beatbox-Image.Po
include ./$(DEPDIR)/beatbox-InfoPanel.Po
include ./$(DEPDIR)/beatbox-LastFM.Po
include ./$(DEPDIR)/beatbox-LibraryManager.Po
include ./$(DEPDIR)/beatbox-LibraryWindow.Po
include ./$(DEPDIR)/beatbox-MediaKeyListener.Po
include ./$(DEPDIR)/beatbox-MusicTreeView.Po
include ./$(DEPDIR)/beatbox-MusicTreeModel.Po
include ./$(DEPDIR)/beatbox-NotImportedWindow.Po
include ./$(DEPDIR)/beatbox-Playlist.Po
include ./$(DEPDIR)/beatbox-PlaylistNameWindow.Po
include ./$(DEPDIR)/beatbox-PreferencesWindow.Po
include ./$(DEPDIR)/beatbox-RatingWidget.Po
include ./$(DEPDIR)/beatbox-ScrollingLabel.Po
include ./$(DEPDIR)/beatbox-Settings.Po
include ./$(DEPDIR)/beatbox-SideTreeView.Po
include ./$(DEPDIR)/beatbox-SimilarPane.Po
include ./$(DEPDIR)/beatbox-SimilarSongs.Po
include ./$(DEPDIR)/beatbox-SimilarSongsView.Po
include ./$(DEPDIR)/beatbox-SimpleOptionChooser.Po
include ./$(DEPDIR)/beatbox-SmartPlaylist.Po
include ./$(DEPDIR)/beatbox-SmartPlaylistEditor.Po
include ./$(DEPDIR)/beatbox-SmartQuery.Po
include ./$(DEPDIR)/beatbox-Song.Po
include ./$(DEPDIR)/beatbox-SongEditor.Po
include ./$(DEPDIR)/beatbox-SongInfo.Po
include ./$(DEPDIR)/beatbox-SoundMenuIntegration.Po
include ./$(DEPDIR)/beatbox-StreamPlayer.Po
include ./$(DEPDIR)/beatbox-Tag.Po
include ./$(DEPDIR)/beatbox-ToolButtonWithMenu.Po
include ./$(DEPDIR)/beatbox-TopDisplay.Po
include ./$(DEPDIR)/beatbox-TrackInfo.Po
include ./$(DEPDIR)/beatbox-TreeViewSetup.Po
include ./$(DEPDIR)/beatbox-Welcome.Po

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC) \
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC) \
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC) \
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

beatbox-BeatBox.o: BeatBox.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-BeatBox.o -MD -MP -MF $(DEPDIR)/beatbox-BeatBox.Tpo -c -o beatbox-BeatBox.o `test -f 'BeatBox.c' || echo '$(srcdir)/'`BeatBox.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-BeatBox.Tpo $(DEPDIR)/beatbox-BeatBox.Po
#	$(AM_V_CC) \
#	source='BeatBox.c' object='beatbox-BeatBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-BeatBox.o `test -f 'BeatBox.c' || echo '$(srcdir)/'`BeatBox.c

beatbox-BeatBox.obj: BeatBox.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-BeatBox.obj -MD -MP -MF $(DEPDIR)/beatbox-BeatBox.Tpo -c -o beatbox-BeatBox.obj `if test -f 'BeatBox.c'; then $(CYGPATH_W) 'BeatBox.c'; else $(CYGPATH_W) '$(srcdir)/BeatBox.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-BeatBox.Tpo $(DEPDIR)/beatbox-BeatBox.Po
#	$(AM_V_CC) \
#	source='BeatBox.c' object='beatbox-BeatBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-BeatBox.obj `if test -f 'BeatBox.c'; then $(CYGPATH_W) 'BeatBox.c'; else $(CYGPATH_W) '$(srcdir)/BeatBox.c'; fi`

beatbox-DataBaseManager.o: DataBaseManager.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-DataBaseManager.o -MD -MP -MF $(DEPDIR)/beatbox-DataBaseManager.Tpo -c -o beatbox-DataBaseManager.o `test -f 'DataBaseManager.c' || echo '$(srcdir)/'`DataBaseManager.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-DataBaseManager.Tpo $(DEPDIR)/beatbox-DataBaseManager.Po
#	$(AM_V_CC) \
#	source='DataBaseManager.c' object='beatbox-DataBaseManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-DataBaseManager.o `test -f 'DataBaseManager.c' || echo '$(srcdir)/'`DataBaseManager.c

beatbox-DataBaseManager.obj: DataBaseManager.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-DataBaseManager.obj -MD -MP -MF $(DEPDIR)/beatbox-DataBaseManager.Tpo -c -o beatbox-DataBaseManager.obj `if test -f 'DataBaseManager.c'; then $(CYGPATH_W) 'DataBaseManager.c'; else $(CYGPATH_W) '$(srcdir)/DataBaseManager.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-DataBaseManager.Tpo $(DEPDIR)/beatbox-DataBaseManager.Po
#	$(AM_V_CC) \
#	source='DataBaseManager.c' object='beatbox-DataBaseManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-DataBaseManager.obj `if test -f 'DataBaseManager.c'; then $(CYGPATH_W) 'DataBaseManager.c'; else $(CYGPATH_W) '$(srcdir)/DataBaseManager.c'; fi`

beatbox-DataBaseUpdater.o: DataBaseUpdater.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-DataBaseUpdater.o -MD -MP -MF $(DEPDIR)/beatbox-DataBaseUpdater.Tpo -c -o beatbox-DataBaseUpdater.o `test -f 'DataBaseUpdater.c' || echo '$(srcdir)/'`DataBaseUpdater.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-DataBaseUpdater.Tpo $(DEPDIR)/beatbox-DataBaseUpdater.Po
#	$(AM_V_CC) \
#	source='DataBaseUpdater.c' object='beatbox-DataBaseUpdater.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-DataBaseUpdater.o `test -f 'DataBaseUpdater.c' || echo '$(srcdir)/'`DataBaseUpdater.c

beatbox-DataBaseUpdater.obj: DataBaseUpdater.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-DataBaseUpdater.obj -MD -MP -MF $(DEPDIR)/beatbox-DataBaseUpdater.Tpo -c -o beatbox-DataBaseUpdater.obj `if test -f 'DataBaseUpdater.c'; then $(CYGPATH_W) 'DataBaseUpdater.c'; else $(CYGPATH_W) '$(srcdir)/DataBaseUpdater.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-DataBaseUpdater.Tpo $(DEPDIR)/beatbox-DataBaseUpdater.Po
#	$(AM_V_CC) \
#	source='DataBaseUpdater.c' object='beatbox-DataBaseUpdater.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-DataBaseUpdater.obj `if test -f 'DataBaseUpdater.c'; then $(CYGPATH_W) 'DataBaseUpdater.c'; else $(CYGPATH_W) '$(srcdir)/DataBaseUpdater.c'; fi`

beatbox-FileOperator.o: FileOperator.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-FileOperator.o -MD -MP -MF $(DEPDIR)/beatbox-FileOperator.Tpo -c -o beatbox-FileOperator.o `test -f 'FileOperator.c' || echo '$(srcdir)/'`FileOperator.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-FileOperator.Tpo $(DEPDIR)/beatbox-FileOperator.Po
#	$(AM_V_CC) \
#	source='FileOperator.c' object='beatbox-FileOperator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-FileOperator.o `test -f 'FileOperator.c' || echo '$(srcdir)/'`FileOperator.c

beatbox-FileOperator.obj: FileOperator.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-FileOperator.obj -MD -MP -MF $(DEPDIR)/beatbox-FileOperator.Tpo -c -o beatbox-FileOperator.obj `if test -f 'FileOperator.c'; then $(CYGPATH_W) 'FileOperator.c'; else $(CYGPATH_W) '$(srcdir)/FileOperator.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-FileOperator.Tpo $(DEPDIR)/beatbox-FileOperator.Po
#	$(AM_V_CC) \
#	source='FileOperator.c' object='beatbox-FileOperator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-FileOperator.obj `if test -f 'FileOperator.c'; then $(CYGPATH_W) 'FileOperator.c'; else $(CYGPATH_W) '$(srcdir)/FileOperator.c'; fi`

beatbox-LibraryManager.o: LibraryManager.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-LibraryManager.o -MD -MP -MF $(DEPDIR)/beatbox-LibraryManager.Tpo -c -o beatbox-LibraryManager.o `test -f 'LibraryManager.c' || echo '$(srcdir)/'`LibraryManager.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-LibraryManager.Tpo $(DEPDIR)/beatbox-LibraryManager.Po
#	$(AM_V_CC) \
#	source='LibraryManager.c' object='beatbox-LibraryManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-LibraryManager.o `test -f 'LibraryManager.c' || echo '$(srcdir)/'`LibraryManager.c

beatbox-LibraryManager.obj: LibraryManager.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-LibraryManager.obj -MD -MP -MF $(DEPDIR)/beatbox-LibraryManager.Tpo -c -o beatbox-LibraryManager.obj `if test -f 'LibraryManager.c'; then $(CYGPATH_W) 'LibraryManager.c'; else $(CYGPATH_W) '$(srcdir)/LibraryManager.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-LibraryManager.Tpo $(DEPDIR)/beatbox-LibraryManager.Po
#	$(AM_V_CC) \
#	source='LibraryManager.c' object='beatbox-LibraryManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-LibraryManager.obj `if test -f 'LibraryManager.c'; then $(CYGPATH_W) 'LibraryManager.c'; else $(CYGPATH_W) '$(srcdir)/LibraryManager.c'; fi`

beatbox-LibraryWindow.o: LibraryWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-LibraryWindow.o -MD -MP -MF $(DEPDIR)/beatbox-LibraryWindow.Tpo -c -o beatbox-LibraryWindow.o `test -f 'LibraryWindow.c' || echo '$(srcdir)/'`LibraryWindow.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-LibraryWindow.Tpo $(DEPDIR)/beatbox-LibraryWindow.Po
#	$(AM_V_CC) \
#	source='LibraryWindow.c' object='beatbox-LibraryWindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-LibraryWindow.o `test -f 'LibraryWindow.c' || echo '$(srcdir)/'`LibraryWindow.c

beatbox-LibraryWindow.obj: LibraryWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-LibraryWindow.obj -MD -MP -MF $(DEPDIR)/beatbox-LibraryWindow.Tpo -c -o beatbox-LibraryWindow.obj `if test -f 'LibraryWindow.c'; then $(CYGPATH_W) 'LibraryWindow.c'; else $(CYGPATH_W) '$(srcdir)/LibraryWindow.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-LibraryWindow.Tpo $(DEPDIR)/beatbox-LibraryWindow.Po
#	$(AM_V_CC) \
#	source='LibraryWindow.c' object='beatbox-LibraryWindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-LibraryWindow.obj `if test -f 'LibraryWindow.c'; then $(CYGPATH_W) 'LibraryWindow.c'; else $(CYGPATH_W) '$(srcdir)/LibraryWindow.c'; fi`

beatbox-Settings.o: Settings.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Settings.o -MD -MP -MF $(DEPDIR)/beatbox-Settings.Tpo -c -o beatbox-Settings.o `test -f 'Settings.c' || echo '$(srcdir)/'`Settings.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Settings.Tpo $(DEPDIR)/beatbox-Settings.Po
#	$(AM_V_CC) \
#	source='Settings.c' object='beatbox-Settings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Settings.o `test -f 'Settings.c' || echo '$(srcdir)/'`Settings.c

beatbox-Settings.obj: Settings.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Settings.obj -MD -MP -MF $(DEPDIR)/beatbox-Settings.Tpo -c -o beatbox-Settings.obj `if test -f 'Settings.c'; then $(CYGPATH_W) 'Settings.c'; else $(CYGPATH_W) '$(srcdir)/Settings.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Settings.Tpo $(DEPDIR)/beatbox-Settings.Po
#	$(AM_V_CC) \
#	source='Settings.c' object='beatbox-Settings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Settings.obj `if test -f 'Settings.c'; then $(CYGPATH_W) 'Settings.c'; else $(CYGPATH_W) '$(srcdir)/Settings.c'; fi`

beatbox-StreamPlayer.o: StreamPlayer.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-StreamPlayer.o -MD -MP -MF $(DEPDIR)/beatbox-StreamPlayer.Tpo -c -o beatbox-StreamPlayer.o `test -f 'StreamPlayer.c' || echo '$(srcdir)/'`StreamPlayer.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-StreamPlayer.Tpo $(DEPDIR)/beatbox-StreamPlayer.Po
#	$(AM_V_CC) \
#	source='StreamPlayer.c' object='beatbox-StreamPlayer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-StreamPlayer.o `test -f 'StreamPlayer.c' || echo '$(srcdir)/'`StreamPlayer.c

beatbox-StreamPlayer.obj: StreamPlayer.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-StreamPlayer.obj -MD -MP -MF $(DEPDIR)/beatbox-StreamPlayer.Tpo -c -o beatbox-StreamPlayer.obj `if test -f 'StreamPlayer.c'; then $(CYGPATH_W) 'StreamPlayer.c'; else $(CYGPATH_W) '$(srcdir)/StreamPlayer.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-StreamPlayer.Tpo $(DEPDIR)/beatbox-StreamPlayer.Po
#	$(AM_V_CC) \
#	source='StreamPlayer.c' object='beatbox-StreamPlayer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-StreamPlayer.obj `if test -f 'StreamPlayer.c'; then $(CYGPATH_W) 'StreamPlayer.c'; else $(CYGPATH_W) '$(srcdir)/StreamPlayer.c'; fi`

beatbox-NotImportedWindow.o: Dialogs/NotImportedWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-NotImportedWindow.o -MD -MP -MF $(DEPDIR)/beatbox-NotImportedWindow.Tpo -c -o beatbox-NotImportedWindow.o `test -f 'Dialogs/NotImportedWindow.c' || echo '$(srcdir)/'`Dialogs/NotImportedWindow.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-NotImportedWindow.Tpo $(DEPDIR)/beatbox-NotImportedWindow.Po
#	$(AM_V_CC) \
#	source='Dialogs/NotImportedWindow.c' object='beatbox-NotImportedWindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-NotImportedWindow.o `test -f 'Dialogs/NotImportedWindow.c' || echo '$(srcdir)/'`Dialogs/NotImportedWindow.c

beatbox-NotImportedWindow.obj: Dialogs/NotImportedWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-NotImportedWindow.obj -MD -MP -MF $(DEPDIR)/beatbox-NotImportedWindow.Tpo -c -o beatbox-NotImportedWindow.obj `if test -f 'Dialogs/NotImportedWindow.c'; then $(CYGPATH_W) 'Dialogs/NotImportedWindow.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/NotImportedWindow.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-NotImportedWindow.Tpo $(DEPDIR)/beatbox-NotImportedWindow.Po
#	$(AM_V_CC) \
#	source='Dialogs/NotImportedWindow.c' object='beatbox-NotImportedWindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-NotImportedWindow.obj `if test -f 'Dialogs/NotImportedWindow.c'; then $(CYGPATH_W) 'Dialogs/NotImportedWindow.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/NotImportedWindow.c'; fi`

beatbox-PlaylistNameWindow.o: Dialogs/PlaylistNameWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-PlaylistNameWindow.o -MD -MP -MF $(DEPDIR)/beatbox-PlaylistNameWindow.Tpo -c -o beatbox-PlaylistNameWindow.o `test -f 'Dialogs/PlaylistNameWindow.c' || echo '$(srcdir)/'`Dialogs/PlaylistNameWindow.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-PlaylistNameWindow.Tpo $(DEPDIR)/beatbox-PlaylistNameWindow.Po
#	$(AM_V_CC) \
#	source='Dialogs/PlaylistNameWindow.c' object='beatbox-PlaylistNameWindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-PlaylistNameWindow.o `test -f 'Dialogs/PlaylistNameWindow.c' || echo '$(srcdir)/'`Dialogs/PlaylistNameWindow.c

beatbox-PlaylistNameWindow.obj: Dialogs/PlaylistNameWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-PlaylistNameWindow.obj -MD -MP -MF $(DEPDIR)/beatbox-PlaylistNameWindow.Tpo -c -o beatbox-PlaylistNameWindow.obj `if test -f 'Dialogs/PlaylistNameWindow.c'; then $(CYGPATH_W) 'Dialogs/PlaylistNameWindow.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/PlaylistNameWindow.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-PlaylistNameWindow.Tpo $(DEPDIR)/beatbox-PlaylistNameWindow.Po
#	$(AM_V_CC) \
#	source='Dialogs/PlaylistNameWindow.c' object='beatbox-PlaylistNameWindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-PlaylistNameWindow.obj `if test -f 'Dialogs/PlaylistNameWindow.c'; then $(CYGPATH_W) 'Dialogs/PlaylistNameWindow.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/PlaylistNameWindow.c'; fi`

beatbox-PreferencesWindow.o: Dialogs/PreferencesWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-PreferencesWindow.o -MD -MP -MF $(DEPDIR)/beatbox-PreferencesWindow.Tpo -c -o beatbox-PreferencesWindow.o `test -f 'Dialogs/PreferencesWindow.c' || echo '$(srcdir)/'`Dialogs/PreferencesWindow.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-PreferencesWindow.Tpo $(DEPDIR)/beatbox-PreferencesWindow.Po
#	$(AM_V_CC) \
#	source='Dialogs/PreferencesWindow.c' object='beatbox-PreferencesWindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-PreferencesWindow.o `test -f 'Dialogs/PreferencesWindow.c' || echo '$(srcdir)/'`Dialogs/PreferencesWindow.c

beatbox-PreferencesWindow.obj: Dialogs/PreferencesWindow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-PreferencesWindow.obj -MD -MP -MF $(DEPDIR)/beatbox-PreferencesWindow.Tpo -c -o beatbox-PreferencesWindow.obj `if test -f 'Dialogs/PreferencesWindow.c'; then $(CYGPATH_W) 'Dialogs/PreferencesWindow.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/PreferencesWindow.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-PreferencesWindow.Tpo $(DEPDIR)/beatbox-PreferencesWindow.Po
#	$(AM_V_CC) \
#	source='Dialogs/PreferencesWindow.c' object='beatbox-PreferencesWindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-PreferencesWindow.obj `if test -f 'Dialogs/PreferencesWindow.c'; then $(CYGPATH_W) 'Dialogs/PreferencesWindow.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/PreferencesWindow.c'; fi`

beatbox-SmartPlaylistEditor.o: Dialogs/SmartPlaylistEditor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SmartPlaylistEditor.o -MD -MP -MF $(DEPDIR)/beatbox-SmartPlaylistEditor.Tpo -c -o beatbox-SmartPlaylistEditor.o `test -f 'Dialogs/SmartPlaylistEditor.c' || echo '$(srcdir)/'`Dialogs/SmartPlaylistEditor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SmartPlaylistEditor.Tpo $(DEPDIR)/beatbox-SmartPlaylistEditor.Po
#	$(AM_V_CC) \
#	source='Dialogs/SmartPlaylistEditor.c' object='beatbox-SmartPlaylistEditor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SmartPlaylistEditor.o `test -f 'Dialogs/SmartPlaylistEditor.c' || echo '$(srcdir)/'`Dialogs/SmartPlaylistEditor.c

beatbox-SmartPlaylistEditor.obj: Dialogs/SmartPlaylistEditor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SmartPlaylistEditor.obj -MD -MP -MF $(DEPDIR)/beatbox-SmartPlaylistEditor.Tpo -c -o beatbox-SmartPlaylistEditor.obj `if test -f 'Dialogs/SmartPlaylistEditor.c'; then $(CYGPATH_W) 'Dialogs/SmartPlaylistEditor.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/SmartPlaylistEditor.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SmartPlaylistEditor.Tpo $(DEPDIR)/beatbox-SmartPlaylistEditor.Po
#	$(AM_V_CC) \
#	source='Dialogs/SmartPlaylistEditor.c' object='beatbox-SmartPlaylistEditor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SmartPlaylistEditor.obj `if test -f 'Dialogs/SmartPlaylistEditor.c'; then $(CYGPATH_W) 'Dialogs/SmartPlaylistEditor.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/SmartPlaylistEditor.c'; fi`

beatbox-SongEditor.o: Dialogs/SongEditor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SongEditor.o -MD -MP -MF $(DEPDIR)/beatbox-SongEditor.Tpo -c -o beatbox-SongEditor.o `test -f 'Dialogs/SongEditor.c' || echo '$(srcdir)/'`Dialogs/SongEditor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SongEditor.Tpo $(DEPDIR)/beatbox-SongEditor.Po
#	$(AM_V_CC) \
#	source='Dialogs/SongEditor.c' object='beatbox-SongEditor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SongEditor.o `test -f 'Dialogs/SongEditor.c' || echo '$(srcdir)/'`Dialogs/SongEditor.c

beatbox-SongEditor.obj: Dialogs/SongEditor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SongEditor.obj -MD -MP -MF $(DEPDIR)/beatbox-SongEditor.Tpo -c -o beatbox-SongEditor.obj `if test -f 'Dialogs/SongEditor.c'; then $(CYGPATH_W) 'Dialogs/SongEditor.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/SongEditor.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SongEditor.Tpo $(DEPDIR)/beatbox-SongEditor.Po
#	$(AM_V_CC) \
#	source='Dialogs/SongEditor.c' object='beatbox-SongEditor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SongEditor.obj `if test -f 'Dialogs/SongEditor.c'; then $(CYGPATH_W) 'Dialogs/SongEditor.c'; else $(CYGPATH_W) '$(srcdir)/Dialogs/SongEditor.c'; fi`

beatbox-AlbumInfo.o: LastFM/AlbumInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-AlbumInfo.o -MD -MP -MF $(DEPDIR)/beatbox-AlbumInfo.Tpo -c -o beatbox-AlbumInfo.o `test -f 'LastFM/AlbumInfo.c' || echo '$(srcdir)/'`LastFM/AlbumInfo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-AlbumInfo.Tpo $(DEPDIR)/beatbox-AlbumInfo.Po
#	$(AM_V_CC) \
#	source='LastFM/AlbumInfo.c' object='beatbox-AlbumInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-AlbumInfo.o `test -f 'LastFM/AlbumInfo.c' || echo '$(srcdir)/'`LastFM/AlbumInfo.c

beatbox-AlbumInfo.obj: LastFM/AlbumInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-AlbumInfo.obj -MD -MP -MF $(DEPDIR)/beatbox-AlbumInfo.Tpo -c -o beatbox-AlbumInfo.obj `if test -f 'LastFM/AlbumInfo.c'; then $(CYGPATH_W) 'LastFM/AlbumInfo.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/AlbumInfo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-AlbumInfo.Tpo $(DEPDIR)/beatbox-AlbumInfo.Po
#	$(AM_V_CC) \
#	source='LastFM/AlbumInfo.c' object='beatbox-AlbumInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-AlbumInfo.obj `if test -f 'LastFM/AlbumInfo.c'; then $(CYGPATH_W) 'LastFM/AlbumInfo.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/AlbumInfo.c'; fi`

beatbox-ArtistInfo.o: LastFM/ArtistInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ArtistInfo.o -MD -MP -MF $(DEPDIR)/beatbox-ArtistInfo.Tpo -c -o beatbox-ArtistInfo.o `test -f 'LastFM/ArtistInfo.c' || echo '$(srcdir)/'`LastFM/ArtistInfo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ArtistInfo.Tpo $(DEPDIR)/beatbox-ArtistInfo.Po
#	$(AM_V_CC) \
#	source='LastFM/ArtistInfo.c' object='beatbox-ArtistInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ArtistInfo.o `test -f 'LastFM/ArtistInfo.c' || echo '$(srcdir)/'`LastFM/ArtistInfo.c

beatbox-ArtistInfo.obj: LastFM/ArtistInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ArtistInfo.obj -MD -MP -MF $(DEPDIR)/beatbox-ArtistInfo.Tpo -c -o beatbox-ArtistInfo.obj `if test -f 'LastFM/ArtistInfo.c'; then $(CYGPATH_W) 'LastFM/ArtistInfo.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/ArtistInfo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ArtistInfo.Tpo $(DEPDIR)/beatbox-ArtistInfo.Po
#	$(AM_V_CC) \
#	source='LastFM/ArtistInfo.c' object='beatbox-ArtistInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ArtistInfo.obj `if test -f 'LastFM/ArtistInfo.c'; then $(CYGPATH_W) 'LastFM/ArtistInfo.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/ArtistInfo.c'; fi`

beatbox-Image.o: LastFM/Image.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Image.o -MD -MP -MF $(DEPDIR)/beatbox-Image.Tpo -c -o beatbox-Image.o `test -f 'LastFM/Image.c' || echo '$(srcdir)/'`LastFM/Image.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Image.Tpo $(DEPDIR)/beatbox-Image.Po
#	$(AM_V_CC) \
#	source='LastFM/Image.c' object='beatbox-Image.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Image.o `test -f 'LastFM/Image.c' || echo '$(srcdir)/'`LastFM/Image.c

beatbox-Image.obj: LastFM/Image.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Image.obj -MD -MP -MF $(DEPDIR)/beatbox-Image.Tpo -c -o beatbox-Image.obj `if test -f 'LastFM/Image.c'; then $(CYGPATH_W) 'LastFM/Image.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/Image.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Image.Tpo $(DEPDIR)/beatbox-Image.Po
#	$(AM_V_CC) \
#	source='LastFM/Image.c' object='beatbox-Image.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Image.obj `if test -f 'LastFM/Image.c'; then $(CYGPATH_W) 'LastFM/Image.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/Image.c'; fi`

beatbox-LastFM.o: LastFM/LastFM.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-LastFM.o -MD -MP -MF $(DEPDIR)/beatbox-LastFM.Tpo -c -o beatbox-LastFM.o `test -f 'LastFM/LastFM.c' || echo '$(srcdir)/'`LastFM/LastFM.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-LastFM.Tpo $(DEPDIR)/beatbox-LastFM.Po
#	$(AM_V_CC) \
#	source='LastFM/LastFM.c' object='beatbox-LastFM.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-LastFM.o `test -f 'LastFM/LastFM.c' || echo '$(srcdir)/'`LastFM/LastFM.c

beatbox-LastFM.obj: LastFM/LastFM.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-LastFM.obj -MD -MP -MF $(DEPDIR)/beatbox-LastFM.Tpo -c -o beatbox-LastFM.obj `if test -f 'LastFM/LastFM.c'; then $(CYGPATH_W) 'LastFM/LastFM.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/LastFM.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-LastFM.Tpo $(DEPDIR)/beatbox-LastFM.Po
#	$(AM_V_CC) \
#	source='LastFM/LastFM.c' object='beatbox-LastFM.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-LastFM.obj `if test -f 'LastFM/LastFM.c'; then $(CYGPATH_W) 'LastFM/LastFM.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/LastFM.c'; fi`

beatbox-SimilarSongs.o: LastFM/SimilarSongs.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimilarSongs.o -MD -MP -MF $(DEPDIR)/beatbox-SimilarSongs.Tpo -c -o beatbox-SimilarSongs.o `test -f 'LastFM/SimilarSongs.c' || echo '$(srcdir)/'`LastFM/SimilarSongs.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimilarSongs.Tpo $(DEPDIR)/beatbox-SimilarSongs.Po
#	$(AM_V_CC) \
#	source='LastFM/SimilarSongs.c' object='beatbox-SimilarSongs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimilarSongs.o `test -f 'LastFM/SimilarSongs.c' || echo '$(srcdir)/'`LastFM/SimilarSongs.c

beatbox-SimilarSongs.obj: LastFM/SimilarSongs.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimilarSongs.obj -MD -MP -MF $(DEPDIR)/beatbox-SimilarSongs.Tpo -c -o beatbox-SimilarSongs.obj `if test -f 'LastFM/SimilarSongs.c'; then $(CYGPATH_W) 'LastFM/SimilarSongs.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/SimilarSongs.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimilarSongs.Tpo $(DEPDIR)/beatbox-SimilarSongs.Po
#	$(AM_V_CC) \
#	source='LastFM/SimilarSongs.c' object='beatbox-SimilarSongs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimilarSongs.obj `if test -f 'LastFM/SimilarSongs.c'; then $(CYGPATH_W) 'LastFM/SimilarSongs.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/SimilarSongs.c'; fi`

beatbox-Tag.o: LastFM/Tag.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Tag.o -MD -MP -MF $(DEPDIR)/beatbox-Tag.Tpo -c -o beatbox-Tag.o `test -f 'LastFM/Tag.c' || echo '$(srcdir)/'`LastFM/Tag.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Tag.Tpo $(DEPDIR)/beatbox-Tag.Po
#	$(AM_V_CC) \
#	source='LastFM/Tag.c' object='beatbox-Tag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Tag.o `test -f 'LastFM/Tag.c' || echo '$(srcdir)/'`LastFM/Tag.c

beatbox-Tag.obj: LastFM/Tag.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Tag.obj -MD -MP -MF $(DEPDIR)/beatbox-Tag.Tpo -c -o beatbox-Tag.obj `if test -f 'LastFM/Tag.c'; then $(CYGPATH_W) 'LastFM/Tag.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/Tag.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Tag.Tpo $(DEPDIR)/beatbox-Tag.Po
#	$(AM_V_CC) \
#	source='LastFM/Tag.c' object='beatbox-Tag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Tag.obj `if test -f 'LastFM/Tag.c'; then $(CYGPATH_W) 'LastFM/Tag.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/Tag.c'; fi`

beatbox-TrackInfo.o: LastFM/TrackInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-TrackInfo.o -MD -MP -MF $(DEPDIR)/beatbox-TrackInfo.Tpo -c -o beatbox-TrackInfo.o `test -f 'LastFM/TrackInfo.c' || echo '$(srcdir)/'`LastFM/TrackInfo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-TrackInfo.Tpo $(DEPDIR)/beatbox-TrackInfo.Po
#	$(AM_V_CC) \
#	source='LastFM/TrackInfo.c' object='beatbox-TrackInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-TrackInfo.o `test -f 'LastFM/TrackInfo.c' || echo '$(srcdir)/'`LastFM/TrackInfo.c

beatbox-TrackInfo.obj: LastFM/TrackInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-TrackInfo.obj -MD -MP -MF $(DEPDIR)/beatbox-TrackInfo.Tpo -c -o beatbox-TrackInfo.obj `if test -f 'LastFM/TrackInfo.c'; then $(CYGPATH_W) 'LastFM/TrackInfo.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/TrackInfo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-TrackInfo.Tpo $(DEPDIR)/beatbox-TrackInfo.Po
#	$(AM_V_CC) \
#	source='LastFM/TrackInfo.c' object='beatbox-TrackInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-TrackInfo.obj `if test -f 'LastFM/TrackInfo.c'; then $(CYGPATH_W) 'LastFM/TrackInfo.c'; else $(CYGPATH_W) '$(srcdir)/LastFM/TrackInfo.c'; fi`

beatbox-MediaKeyListener.o: Objects/MediaKeyListener.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-MediaKeyListener.o -MD -MP -MF $(DEPDIR)/beatbox-MediaKeyListener.Tpo -c -o beatbox-MediaKeyListener.o `test -f 'Objects/MediaKeyListener.c' || echo '$(srcdir)/'`Objects/MediaKeyListener.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-MediaKeyListener.Tpo $(DEPDIR)/beatbox-MediaKeyListener.Po
#	$(AM_V_CC) \
#	source='Objects/MediaKeyListener.c' object='beatbox-MediaKeyListener.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-MediaKeyListener.o `test -f 'Objects/MediaKeyListener.c' || echo '$(srcdir)/'`Objects/MediaKeyListener.c

beatbox-MediaKeyListener.obj: Objects/MediaKeyListener.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-MediaKeyListener.obj -MD -MP -MF $(DEPDIR)/beatbox-MediaKeyListener.Tpo -c -o beatbox-MediaKeyListener.obj `if test -f 'Objects/MediaKeyListener.c'; then $(CYGPATH_W) 'Objects/MediaKeyListener.c'; else $(CYGPATH_W) '$(srcdir)/Objects/MediaKeyListener.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-MediaKeyListener.Tpo $(DEPDIR)/beatbox-MediaKeyListener.Po
#	$(AM_V_CC) \
#	source='Objects/MediaKeyListener.c' object='beatbox-MediaKeyListener.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-MediaKeyListener.obj `if test -f 'Objects/MediaKeyListener.c'; then $(CYGPATH_W) 'Objects/MediaKeyListener.c'; else $(CYGPATH_W) '$(srcdir)/Objects/MediaKeyListener.c'; fi`

beatbox-Playlist.o: Objects/Playlist.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Playlist.o -MD -MP -MF $(DEPDIR)/beatbox-Playlist.Tpo -c -o beatbox-Playlist.o `test -f 'Objects/Playlist.c' || echo '$(srcdir)/'`Objects/Playlist.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Playlist.Tpo $(DEPDIR)/beatbox-Playlist.Po
#	$(AM_V_CC) \
#	source='Objects/Playlist.c' object='beatbox-Playlist.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Playlist.o `test -f 'Objects/Playlist.c' || echo '$(srcdir)/'`Objects/Playlist.c

beatbox-Playlist.obj: Objects/Playlist.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Playlist.obj -MD -MP -MF $(DEPDIR)/beatbox-Playlist.Tpo -c -o beatbox-Playlist.obj `if test -f 'Objects/Playlist.c'; then $(CYGPATH_W) 'Objects/Playlist.c'; else $(CYGPATH_W) '$(srcdir)/Objects/Playlist.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Playlist.Tpo $(DEPDIR)/beatbox-Playlist.Po
#	$(AM_V_CC) \
#	source='Objects/Playlist.c' object='beatbox-Playlist.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Playlist.obj `if test -f 'Objects/Playlist.c'; then $(CYGPATH_W) 'Objects/Playlist.c'; else $(CYGPATH_W) '$(srcdir)/Objects/Playlist.c'; fi`

beatbox-SmartPlaylist.o: Objects/SmartPlaylist.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SmartPlaylist.o -MD -MP -MF $(DEPDIR)/beatbox-SmartPlaylist.Tpo -c -o beatbox-SmartPlaylist.o `test -f 'Objects/SmartPlaylist.c' || echo '$(srcdir)/'`Objects/SmartPlaylist.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SmartPlaylist.Tpo $(DEPDIR)/beatbox-SmartPlaylist.Po
#	$(AM_V_CC) \
#	source='Objects/SmartPlaylist.c' object='beatbox-SmartPlaylist.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SmartPlaylist.o `test -f 'Objects/SmartPlaylist.c' || echo '$(srcdir)/'`Objects/SmartPlaylist.c

beatbox-SmartPlaylist.obj: Objects/SmartPlaylist.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SmartPlaylist.obj -MD -MP -MF $(DEPDIR)/beatbox-SmartPlaylist.Tpo -c -o beatbox-SmartPlaylist.obj `if test -f 'Objects/SmartPlaylist.c'; then $(CYGPATH_W) 'Objects/SmartPlaylist.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SmartPlaylist.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SmartPlaylist.Tpo $(DEPDIR)/beatbox-SmartPlaylist.Po
#	$(AM_V_CC) \
#	source='Objects/SmartPlaylist.c' object='beatbox-SmartPlaylist.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SmartPlaylist.obj `if test -f 'Objects/SmartPlaylist.c'; then $(CYGPATH_W) 'Objects/SmartPlaylist.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SmartPlaylist.c'; fi`

beatbox-SmartQuery.o: Objects/SmartQuery.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SmartQuery.o -MD -MP -MF $(DEPDIR)/beatbox-SmartQuery.Tpo -c -o beatbox-SmartQuery.o `test -f 'Objects/SmartQuery.c' || echo '$(srcdir)/'`Objects/SmartQuery.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SmartQuery.Tpo $(DEPDIR)/beatbox-SmartQuery.Po
#	$(AM_V_CC) \
#	source='Objects/SmartQuery.c' object='beatbox-SmartQuery.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SmartQuery.o `test -f 'Objects/SmartQuery.c' || echo '$(srcdir)/'`Objects/SmartQuery.c

beatbox-SmartQuery.obj: Objects/SmartQuery.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SmartQuery.obj -MD -MP -MF $(DEPDIR)/beatbox-SmartQuery.Tpo -c -o beatbox-SmartQuery.obj `if test -f 'Objects/SmartQuery.c'; then $(CYGPATH_W) 'Objects/SmartQuery.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SmartQuery.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SmartQuery.Tpo $(DEPDIR)/beatbox-SmartQuery.Po
#	$(AM_V_CC) \
#	source='Objects/SmartQuery.c' object='beatbox-SmartQuery.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SmartQuery.obj `if test -f 'Objects/SmartQuery.c'; then $(CYGPATH_W) 'Objects/SmartQuery.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SmartQuery.c'; fi`

beatbox-Song.o: Objects/Song.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Song.o -MD -MP -MF $(DEPDIR)/beatbox-Song.Tpo -c -o beatbox-Song.o `test -f 'Objects/Song.c' || echo '$(srcdir)/'`Objects/Song.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Song.Tpo $(DEPDIR)/beatbox-Song.Po
#	$(AM_V_CC) \
#	source='Objects/Song.c' object='beatbox-Song.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Song.o `test -f 'Objects/Song.c' || echo '$(srcdir)/'`Objects/Song.c

beatbox-Song.obj: Objects/Song.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Song.obj -MD -MP -MF $(DEPDIR)/beatbox-Song.Tpo -c -o beatbox-Song.obj `if test -f 'Objects/Song.c'; then $(CYGPATH_W) 'Objects/Song.c'; else $(CYGPATH_W) '$(srcdir)/Objects/Song.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Song.Tpo $(DEPDIR)/beatbox-Song.Po
#	$(AM_V_CC) \
#	source='Objects/Song.c' object='beatbox-Song.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Song.obj `if test -f 'Objects/Song.c'; then $(CYGPATH_W) 'Objects/Song.c'; else $(CYGPATH_W) '$(srcdir)/Objects/Song.c'; fi`

beatbox-SongInfo.o: Objects/SongInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SongInfo.o -MD -MP -MF $(DEPDIR)/beatbox-SongInfo.Tpo -c -o beatbox-SongInfo.o `test -f 'Objects/SongInfo.c' || echo '$(srcdir)/'`Objects/SongInfo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SongInfo.Tpo $(DEPDIR)/beatbox-SongInfo.Po
#	$(AM_V_CC) \
#	source='Objects/SongInfo.c' object='beatbox-SongInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SongInfo.o `test -f 'Objects/SongInfo.c' || echo '$(srcdir)/'`Objects/SongInfo.c

beatbox-SongInfo.obj: Objects/SongInfo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SongInfo.obj -MD -MP -MF $(DEPDIR)/beatbox-SongInfo.Tpo -c -o beatbox-SongInfo.obj `if test -f 'Objects/SongInfo.c'; then $(CYGPATH_W) 'Objects/SongInfo.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SongInfo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SongInfo.Tpo $(DEPDIR)/beatbox-SongInfo.Po
#	$(AM_V_CC) \
#	source='Objects/SongInfo.c' object='beatbox-SongInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SongInfo.obj `if test -f 'Objects/SongInfo.c'; then $(CYGPATH_W) 'Objects/SongInfo.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SongInfo.c'; fi`

beatbox-SoundMenuIntegration.o: Objects/SoundMenuIntegration.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SoundMenuIntegration.o -MD -MP -MF $(DEPDIR)/beatbox-SoundMenuIntegration.Tpo -c -o beatbox-SoundMenuIntegration.o `test -f 'Objects/SoundMenuIntegration.c' || echo '$(srcdir)/'`Objects/SoundMenuIntegration.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SoundMenuIntegration.Tpo $(DEPDIR)/beatbox-SoundMenuIntegration.Po
#	$(AM_V_CC) \
#	source='Objects/SoundMenuIntegration.c' object='beatbox-SoundMenuIntegration.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SoundMenuIntegration.o `test -f 'Objects/SoundMenuIntegration.c' || echo '$(srcdir)/'`Objects/SoundMenuIntegration.c

beatbox-SoundMenuIntegration.obj: Objects/SoundMenuIntegration.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SoundMenuIntegration.obj -MD -MP -MF $(DEPDIR)/beatbox-SoundMenuIntegration.Tpo -c -o beatbox-SoundMenuIntegration.obj `if test -f 'Objects/SoundMenuIntegration.c'; then $(CYGPATH_W) 'Objects/SoundMenuIntegration.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SoundMenuIntegration.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SoundMenuIntegration.Tpo $(DEPDIR)/beatbox-SoundMenuIntegration.Po
#	$(AM_V_CC) \
#	source='Objects/SoundMenuIntegration.c' object='beatbox-SoundMenuIntegration.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SoundMenuIntegration.obj `if test -f 'Objects/SoundMenuIntegration.c'; then $(CYGPATH_W) 'Objects/SoundMenuIntegration.c'; else $(CYGPATH_W) '$(srcdir)/Objects/SoundMenuIntegration.c'; fi`

beatbox-TreeViewSetup.o: Objects/TreeViewSetup.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-TreeViewSetup.o -MD -MP -MF $(DEPDIR)/beatbox-TreeViewSetup.Tpo -c -o beatbox-TreeViewSetup.o `test -f 'Objects/TreeViewSetup.c' || echo '$(srcdir)/'`Objects/TreeViewSetup.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-TreeViewSetup.Tpo $(DEPDIR)/beatbox-TreeViewSetup.Po
#	$(AM_V_CC) \
#	source='Objects/TreeViewSetup.c' object='beatbox-TreeViewSetup.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-TreeViewSetup.o `test -f 'Objects/TreeViewSetup.c' || echo '$(srcdir)/'`Objects/TreeViewSetup.c

beatbox-TreeViewSetup.obj: Objects/TreeViewSetup.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-TreeViewSetup.obj -MD -MP -MF $(DEPDIR)/beatbox-TreeViewSetup.Tpo -c -o beatbox-TreeViewSetup.obj `if test -f 'Objects/TreeViewSetup.c'; then $(CYGPATH_W) 'Objects/TreeViewSetup.c'; else $(CYGPATH_W) '$(srcdir)/Objects/TreeViewSetup.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-TreeViewSetup.Tpo $(DEPDIR)/beatbox-TreeViewSetup.Po
#	$(AM_V_CC) \
#	source='Objects/TreeViewSetup.c' object='beatbox-TreeViewSetup.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-TreeViewSetup.obj `if test -f 'Objects/TreeViewSetup.c'; then $(CYGPATH_W) 'Objects/TreeViewSetup.c'; else $(CYGPATH_W) '$(srcdir)/Objects/TreeViewSetup.c'; fi`

beatbox-AppMenu.o: Widgets/AppMenu.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-AppMenu.o -MD -MP -MF $(DEPDIR)/beatbox-AppMenu.Tpo -c -o beatbox-AppMenu.o `test -f 'Widgets/AppMenu.c' || echo '$(srcdir)/'`Widgets/AppMenu.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-AppMenu.Tpo $(DEPDIR)/beatbox-AppMenu.Po
#	$(AM_V_CC) \
#	source='Widgets/AppMenu.c' object='beatbox-AppMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-AppMenu.o `test -f 'Widgets/AppMenu.c' || echo '$(srcdir)/'`Widgets/AppMenu.c

beatbox-AppMenu.obj: Widgets/AppMenu.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-AppMenu.obj -MD -MP -MF $(DEPDIR)/beatbox-AppMenu.Tpo -c -o beatbox-AppMenu.obj `if test -f 'Widgets/AppMenu.c'; then $(CYGPATH_W) 'Widgets/AppMenu.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/AppMenu.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-AppMenu.Tpo $(DEPDIR)/beatbox-AppMenu.Po
#	$(AM_V_CC) \
#	source='Widgets/AppMenu.c' object='beatbox-AppMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-AppMenu.obj `if test -f 'Widgets/AppMenu.c'; then $(CYGPATH_W) 'Widgets/AppMenu.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/AppMenu.c'; fi`

beatbox-ElementaryEntry.o: Widgets/ElementaryEntry.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ElementaryEntry.o -MD -MP -MF $(DEPDIR)/beatbox-ElementaryEntry.Tpo -c -o beatbox-ElementaryEntry.o `test -f 'Widgets/ElementaryEntry.c' || echo '$(srcdir)/'`Widgets/ElementaryEntry.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ElementaryEntry.Tpo $(DEPDIR)/beatbox-ElementaryEntry.Po
#	$(AM_V_CC) \
#	source='Widgets/ElementaryEntry.c' object='beatbox-ElementaryEntry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ElementaryEntry.o `test -f 'Widgets/ElementaryEntry.c' || echo '$(srcdir)/'`Widgets/ElementaryEntry.c

beatbox-ElementaryEntry.obj: Widgets/ElementaryEntry.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ElementaryEntry.obj -MD -MP -MF $(DEPDIR)/beatbox-ElementaryEntry.Tpo -c -o beatbox-ElementaryEntry.obj `if test -f 'Widgets/ElementaryEntry.c'; then $(CYGPATH_W) 'Widgets/ElementaryEntry.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ElementaryEntry.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ElementaryEntry.Tpo $(DEPDIR)/beatbox-ElementaryEntry.Po
#	$(AM_V_CC) \
#	source='Widgets/ElementaryEntry.c' object='beatbox-ElementaryEntry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ElementaryEntry.obj `if test -f 'Widgets/ElementaryEntry.c'; then $(CYGPATH_W) 'Widgets/ElementaryEntry.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ElementaryEntry.c'; fi`

beatbox-ElementaryTreeView.o: Widgets/ElementaryTreeView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ElementaryTreeView.o -MD -MP -MF $(DEPDIR)/beatbox-ElementaryTreeView.Tpo -c -o beatbox-ElementaryTreeView.o `test -f 'Widgets/ElementaryTreeView.c' || echo '$(srcdir)/'`Widgets/ElementaryTreeView.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ElementaryTreeView.Tpo $(DEPDIR)/beatbox-ElementaryTreeView.Po
#	$(AM_V_CC) \
#	source='Widgets/ElementaryTreeView.c' object='beatbox-ElementaryTreeView.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ElementaryTreeView.o `test -f 'Widgets/ElementaryTreeView.c' || echo '$(srcdir)/'`Widgets/ElementaryTreeView.c

beatbox-ElementaryTreeView.obj: Widgets/ElementaryTreeView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ElementaryTreeView.obj -MD -MP -MF $(DEPDIR)/beatbox-ElementaryTreeView.Tpo -c -o beatbox-ElementaryTreeView.obj `if test -f 'Widgets/ElementaryTreeView.c'; then $(CYGPATH_W) 'Widgets/ElementaryTreeView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ElementaryTreeView.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ElementaryTreeView.Tpo $(DEPDIR)/beatbox-ElementaryTreeView.Po
#	$(AM_V_CC) \
#	source='Widgets/ElementaryTreeView.c' object='beatbox-ElementaryTreeView.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ElementaryTreeView.obj `if test -f 'Widgets/ElementaryTreeView.c'; then $(CYGPATH_W) 'Widgets/ElementaryTreeView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ElementaryTreeView.c'; fi`

beatbox-InfoPanel.o: Widgets/InfoPanel.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-InfoPanel.o -MD -MP -MF $(DEPDIR)/beatbox-InfoPanel.Tpo -c -o beatbox-InfoPanel.o `test -f 'Widgets/InfoPanel.c' || echo '$(srcdir)/'`Widgets/InfoPanel.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-InfoPanel.Tpo $(DEPDIR)/beatbox-InfoPanel.Po
#	$(AM_V_CC) \
#	source='Widgets/InfoPanel.c' object='beatbox-InfoPanel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-InfoPanel.o `test -f 'Widgets/InfoPanel.c' || echo '$(srcdir)/'`Widgets/InfoPanel.c

beatbox-InfoPanel.obj: Widgets/InfoPanel.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-InfoPanel.obj -MD -MP -MF $(DEPDIR)/beatbox-InfoPanel.Tpo -c -o beatbox-InfoPanel.obj `if test -f 'Widgets/InfoPanel.c'; then $(CYGPATH_W) 'Widgets/InfoPanel.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/InfoPanel.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-InfoPanel.Tpo $(DEPDIR)/beatbox-InfoPanel.Po
#	$(AM_V_CC) \
#	source='Widgets/InfoPanel.c' object='beatbox-InfoPanel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-InfoPanel.obj `if test -f 'Widgets/InfoPanel.c'; then $(CYGPATH_W) 'Widgets/InfoPanel.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/InfoPanel.c'; fi`

beatbox-MusicTreeView.o: Widgets/MusicTreeView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-MusicTreeView.o -MD -MP -MF $(DEPDIR)/beatbox-MusicTreeView.Tpo -c -o beatbox-MusicTreeView.o `test -f 'Widgets/MusicTreeView.c' || echo '$(srcdir)/'`Widgets/MusicTreeView.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-MusicTreeView.Tpo $(DEPDIR)/beatbox-MusicTreeView.Po
#	$(AM_V_CC) \
#	source='Widgets/MusicTreeView.c' object='beatbox-MusicTreeView.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-MusicTreeView.o `test -f 'Widgets/MusicTreeView.c' || echo '$(srcdir)/'`Widgets/MusicTreeView.c

beatbox-MusicTreeView.o: Widgets/MusicTreeModel.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-MusicTreeModel.o -MD -MP -MF $(DEPDIR)/beatbox-MusicTreeModel.Tpo -c -o beatbox-MusicTreeModel.o `test -f 'Widgets/MusicTreeModel.c' || echo '$(srcdir)/'`Widgets/MusicTreeModel.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-MusicTreeModel.Tpo $(DEPDIR)/beatbox-MusicTreeModel.Po
#	$(AM_V_CC) \
#	source='Widgets/MusicTreeVModel.c' object='beatbox-MusicTreeModel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-MusicTreeModel.o `test -f 'Widgets/MusicTreeModel.c' || echo '$(srcdir)/'`Widgets/MusicTreeModel.c


beatbox-MusicTreeView.obj: Widgets/MusicTreeView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-MusicTreeView.obj -MD -MP -MF $(DEPDIR)/beatbox-MusicTreeView.Tpo -c -o beatbox-MusicTreeView.obj `if test -f 'Widgets/MusicTreeView.c'; then $(CYGPATH_W) 'Widgets/MusicTreeView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/MusicTreeView.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-MusicTreeView.Tpo $(DEPDIR)/beatbox-MusicTreeView.Po
#	$(AM_V_CC) \
#	source='Widgets/MusicTreeView.c' object='beatbox-MusicTreeView.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-MusicTreeView.obj `if test -f 'Widgets/MusicTreeView.c'; then $(CYGPATH_W) 'Widgets/MusicTreeView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/MusicTreeView.c'; fi`

beatbox-RatingWidget.o: Widgets/RatingWidget.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-RatingWidget.o -MD -MP -MF $(DEPDIR)/beatbox-RatingWidget.Tpo -c -o beatbox-RatingWidget.o `test -f 'Widgets/RatingWidget.c' || echo '$(srcdir)/'`Widgets/RatingWidget.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-RatingWidget.Tpo $(DEPDIR)/beatbox-RatingWidget.Po
#	$(AM_V_CC) \
#	source='Widgets/RatingWidget.c' object='beatbox-RatingWidget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-RatingWidget.o `test -f 'Widgets/RatingWidget.c' || echo '$(srcdir)/'`Widgets/RatingWidget.c

beatbox-RatingWidget.obj: Widgets/RatingWidget.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-RatingWidget.obj -MD -MP -MF $(DEPDIR)/beatbox-RatingWidget.Tpo -c -o beatbox-RatingWidget.obj `if test -f 'Widgets/RatingWidget.c'; then $(CYGPATH_W) 'Widgets/RatingWidget.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/RatingWidget.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-RatingWidget.Tpo $(DEPDIR)/beatbox-RatingWidget.Po
#	$(AM_V_CC) \
#	source='Widgets/RatingWidget.c' object='beatbox-RatingWidget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-RatingWidget.obj `if test -f 'Widgets/RatingWidget.c'; then $(CYGPATH_W) 'Widgets/RatingWidget.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/RatingWidget.c'; fi`

beatbox-ScrollingLabel.o: Widgets/ScrollingLabel.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ScrollingLabel.o -MD -MP -MF $(DEPDIR)/beatbox-ScrollingLabel.Tpo -c -o beatbox-ScrollingLabel.o `test -f 'Widgets/ScrollingLabel.c' || echo '$(srcdir)/'`Widgets/ScrollingLabel.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ScrollingLabel.Tpo $(DEPDIR)/beatbox-ScrollingLabel.Po
#	$(AM_V_CC) \
#	source='Widgets/ScrollingLabel.c' object='beatbox-ScrollingLabel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ScrollingLabel.o `test -f 'Widgets/ScrollingLabel.c' || echo '$(srcdir)/'`Widgets/ScrollingLabel.c

beatbox-ScrollingLabel.obj: Widgets/ScrollingLabel.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ScrollingLabel.obj -MD -MP -MF $(DEPDIR)/beatbox-ScrollingLabel.Tpo -c -o beatbox-ScrollingLabel.obj `if test -f 'Widgets/ScrollingLabel.c'; then $(CYGPATH_W) 'Widgets/ScrollingLabel.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ScrollingLabel.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ScrollingLabel.Tpo $(DEPDIR)/beatbox-ScrollingLabel.Po
#	$(AM_V_CC) \
#	source='Widgets/ScrollingLabel.c' object='beatbox-ScrollingLabel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ScrollingLabel.obj `if test -f 'Widgets/ScrollingLabel.c'; then $(CYGPATH_W) 'Widgets/ScrollingLabel.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ScrollingLabel.c'; fi`

beatbox-SideTreeView.o: Widgets/SideTreeView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SideTreeView.o -MD -MP -MF $(DEPDIR)/beatbox-SideTreeView.Tpo -c -o beatbox-SideTreeView.o `test -f 'Widgets/SideTreeView.c' || echo '$(srcdir)/'`Widgets/SideTreeView.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SideTreeView.Tpo $(DEPDIR)/beatbox-SideTreeView.Po
#	$(AM_V_CC) \
#	source='Widgets/SideTreeView.c' object='beatbox-SideTreeView.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SideTreeView.o `test -f 'Widgets/SideTreeView.c' || echo '$(srcdir)/'`Widgets/SideTreeView.c

beatbox-SideTreeView.obj: Widgets/SideTreeView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SideTreeView.obj -MD -MP -MF $(DEPDIR)/beatbox-SideTreeView.Tpo -c -o beatbox-SideTreeView.obj `if test -f 'Widgets/SideTreeView.c'; then $(CYGPATH_W) 'Widgets/SideTreeView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SideTreeView.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SideTreeView.Tpo $(DEPDIR)/beatbox-SideTreeView.Po
#	$(AM_V_CC) \
#	source='Widgets/SideTreeView.c' object='beatbox-SideTreeView.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SideTreeView.obj `if test -f 'Widgets/SideTreeView.c'; then $(CYGPATH_W) 'Widgets/SideTreeView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SideTreeView.c'; fi`

beatbox-SimilarPane.o: Widgets/SimilarPane.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimilarPane.o -MD -MP -MF $(DEPDIR)/beatbox-SimilarPane.Tpo -c -o beatbox-SimilarPane.o `test -f 'Widgets/SimilarPane.c' || echo '$(srcdir)/'`Widgets/SimilarPane.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimilarPane.Tpo $(DEPDIR)/beatbox-SimilarPane.Po
#	$(AM_V_CC) \
#	source='Widgets/SimilarPane.c' object='beatbox-SimilarPane.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimilarPane.o `test -f 'Widgets/SimilarPane.c' || echo '$(srcdir)/'`Widgets/SimilarPane.c

beatbox-SimilarPane.obj: Widgets/SimilarPane.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimilarPane.obj -MD -MP -MF $(DEPDIR)/beatbox-SimilarPane.Tpo -c -o beatbox-SimilarPane.obj `if test -f 'Widgets/SimilarPane.c'; then $(CYGPATH_W) 'Widgets/SimilarPane.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SimilarPane.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimilarPane.Tpo $(DEPDIR)/beatbox-SimilarPane.Po
#	$(AM_V_CC) \
#	source='Widgets/SimilarPane.c' object='beatbox-SimilarPane.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimilarPane.obj `if test -f 'Widgets/SimilarPane.c'; then $(CYGPATH_W) 'Widgets/SimilarPane.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SimilarPane.c'; fi`

beatbox-SimilarSongsView.o: Widgets/SimilarSongsView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimilarSongsView.o -MD -MP -MF $(DEPDIR)/beatbox-SimilarSongsView.Tpo -c -o beatbox-SimilarSongsView.o `test -f 'Widgets/SimilarSongsView.c' || echo '$(srcdir)/'`Widgets/SimilarSongsView.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimilarSongsView.Tpo $(DEPDIR)/beatbox-SimilarSongsView.Po
#	$(AM_V_CC) \
#	source='Widgets/SimilarSongsView.c' object='beatbox-SimilarSongsView.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimilarSongsView.o `test -f 'Widgets/SimilarSongsView.c' || echo '$(srcdir)/'`Widgets/SimilarSongsView.c

beatbox-SimilarSongsView.obj: Widgets/SimilarSongsView.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimilarSongsView.obj -MD -MP -MF $(DEPDIR)/beatbox-SimilarSongsView.Tpo -c -o beatbox-SimilarSongsView.obj `if test -f 'Widgets/SimilarSongsView.c'; then $(CYGPATH_W) 'Widgets/SimilarSongsView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SimilarSongsView.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimilarSongsView.Tpo $(DEPDIR)/beatbox-SimilarSongsView.Po
#	$(AM_V_CC) \
#	source='Widgets/SimilarSongsView.c' object='beatbox-SimilarSongsView.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimilarSongsView.obj `if test -f 'Widgets/SimilarSongsView.c'; then $(CYGPATH_W) 'Widgets/SimilarSongsView.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SimilarSongsView.c'; fi`

beatbox-SimpleOptionChooser.o: Widgets/SimpleOptionChooser.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimpleOptionChooser.o -MD -MP -MF $(DEPDIR)/beatbox-SimpleOptionChooser.Tpo -c -o beatbox-SimpleOptionChooser.o `test -f 'Widgets/SimpleOptionChooser.c' || echo '$(srcdir)/'`Widgets/SimpleOptionChooser.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimpleOptionChooser.Tpo $(DEPDIR)/beatbox-SimpleOptionChooser.Po
#	$(AM_V_CC) \
#	source='Widgets/SimpleOptionChooser.c' object='beatbox-SimpleOptionChooser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimpleOptionChooser.o `test -f 'Widgets/SimpleOptionChooser.c' || echo '$(srcdir)/'`Widgets/SimpleOptionChooser.c

beatbox-SimpleOptionChooser.obj: Widgets/SimpleOptionChooser.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-SimpleOptionChooser.obj -MD -MP -MF $(DEPDIR)/beatbox-SimpleOptionChooser.Tpo -c -o beatbox-SimpleOptionChooser.obj `if test -f 'Widgets/SimpleOptionChooser.c'; then $(CYGPATH_W) 'Widgets/SimpleOptionChooser.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SimpleOptionChooser.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-SimpleOptionChooser.Tpo $(DEPDIR)/beatbox-SimpleOptionChooser.Po
#	$(AM_V_CC) \
#	source='Widgets/SimpleOptionChooser.c' object='beatbox-SimpleOptionChooser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-SimpleOptionChooser.obj `if test -f 'Widgets/SimpleOptionChooser.c'; then $(CYGPATH_W) 'Widgets/SimpleOptionChooser.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/SimpleOptionChooser.c'; fi`

beatbox-ToolButtonWithMenu.o: Widgets/ToolButtonWithMenu.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ToolButtonWithMenu.o -MD -MP -MF $(DEPDIR)/beatbox-ToolButtonWithMenu.Tpo -c -o beatbox-ToolButtonWithMenu.o `test -f 'Widgets/ToolButtonWithMenu.c' || echo '$(srcdir)/'`Widgets/ToolButtonWithMenu.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ToolButtonWithMenu.Tpo $(DEPDIR)/beatbox-ToolButtonWithMenu.Po
#	$(AM_V_CC) \
#	source='Widgets/ToolButtonWithMenu.c' object='beatbox-ToolButtonWithMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ToolButtonWithMenu.o `test -f 'Widgets/ToolButtonWithMenu.c' || echo '$(srcdir)/'`Widgets/ToolButtonWithMenu.c

beatbox-ToolButtonWithMenu.obj: Widgets/ToolButtonWithMenu.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-ToolButtonWithMenu.obj -MD -MP -MF $(DEPDIR)/beatbox-ToolButtonWithMenu.Tpo -c -o beatbox-ToolButtonWithMenu.obj `if test -f 'Widgets/ToolButtonWithMenu.c'; then $(CYGPATH_W) 'Widgets/ToolButtonWithMenu.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ToolButtonWithMenu.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-ToolButtonWithMenu.Tpo $(DEPDIR)/beatbox-ToolButtonWithMenu.Po
#	$(AM_V_CC) \
#	source='Widgets/ToolButtonWithMenu.c' object='beatbox-ToolButtonWithMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-ToolButtonWithMenu.obj `if test -f 'Widgets/ToolButtonWithMenu.c'; then $(CYGPATH_W) 'Widgets/ToolButtonWithMenu.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/ToolButtonWithMenu.c'; fi`

beatbox-TopDisplay.o: Widgets/TopDisplay.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-TopDisplay.o -MD -MP -MF $(DEPDIR)/beatbox-TopDisplay.Tpo -c -o beatbox-TopDisplay.o `test -f 'Widgets/TopDisplay.c' || echo '$(srcdir)/'`Widgets/TopDisplay.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-TopDisplay.Tpo $(DEPDIR)/beatbox-TopDisplay.Po
#	$(AM_V_CC) \
#	source='Widgets/TopDisplay.c' object='beatbox-TopDisplay.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-TopDisplay.o `test -f 'Widgets/TopDisplay.c' || echo '$(srcdir)/'`Widgets/TopDisplay.c

beatbox-TopDisplay.obj: Widgets/TopDisplay.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-TopDisplay.obj -MD -MP -MF $(DEPDIR)/beatbox-TopDisplay.Tpo -c -o beatbox-TopDisplay.obj `if test -f 'Widgets/TopDisplay.c'; then $(CYGPATH_W) 'Widgets/TopDisplay.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/TopDisplay.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-TopDisplay.Tpo $(DEPDIR)/beatbox-TopDisplay.Po
#	$(AM_V_CC) \
#	source='Widgets/TopDisplay.c' object='beatbox-TopDisplay.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-TopDisplay.obj `if test -f 'Widgets/TopDisplay.c'; then $(CYGPATH_W) 'Widgets/TopDisplay.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/TopDisplay.c'; fi`

beatbox-Welcome.o: Widgets/Welcome.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Welcome.o -MD -MP -MF $(DEPDIR)/beatbox-Welcome.Tpo -c -o beatbox-Welcome.o `test -f 'Widgets/Welcome.c' || echo '$(srcdir)/'`Widgets/Welcome.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Welcome.Tpo $(DEPDIR)/beatbox-Welcome.Po
#	$(AM_V_CC) \
#	source='Widgets/Welcome.c' object='beatbox-Welcome.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Welcome.o `test -f 'Widgets/Welcome.c' || echo '$(srcdir)/'`Widgets/Welcome.c

beatbox-Welcome.obj: Widgets/Welcome.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT beatbox-Welcome.obj -MD -MP -MF $(DEPDIR)/beatbox-Welcome.Tpo -c -o beatbox-Welcome.obj `if test -f 'Widgets/Welcome.c'; then $(CYGPATH_W) 'Widgets/Welcome.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/Welcome.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beatbox-Welcome.Tpo $(DEPDIR)/beatbox-Welcome.Po
#	$(AM_V_CC) \
#	source='Widgets/Welcome.c' object='beatbox-Welcome.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(beatbox_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o beatbox-Welcome.obj `if test -f 'Widgets/Welcome.c'; then $(CYGPATH_W) 'Widgets/Welcome.c'; else $(CYGPATH_W) '$(srcdir)/Widgets/Welcome.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS


beatbox.vala.stamp: $(beatbox_VALASOURCES)
	$(AM_V_GEN) $(VALAC) $(beatbox_VALAFLAGS) $^
	touch beatbox.vala.stamp

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
